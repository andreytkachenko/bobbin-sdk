#[allow(unused_imports)] use ::bobbin_common::*;

#[derive(Clone, Copy, PartialEq, Eq)]
#[doc="CAN Peripheral"]
pub struct CanPeriph(pub usize); 

impl CanPeriph {
    #[doc="Get the *mut pointer for the MCR register."]
    #[inline] pub fn mcr_mut(&self) -> *mut Mcr { 
        (self.0 + 0x0) as *mut Mcr
    }

    #[doc="Get the *const pointer for the MCR register."]
    #[inline] pub fn mcr_ptr(&self) -> *const Mcr { 
           self.mcr_mut()
    }

    #[doc="Read the MCR register."]
    #[inline] pub fn mcr(&self) -> Mcr { 
        unsafe {
            read_volatile(self.mcr_ptr())
        }
    }

    #[doc="Write the MCR register."]
    #[inline] pub fn set_mcr<F: FnOnce(Mcr) -> Mcr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.mcr_mut(), f(Mcr(0)));
        }
        self
    }

    #[doc="Modify the MCR register."]
    #[inline] pub fn with_mcr<F: FnOnce(Mcr) -> Mcr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.mcr_mut(), f(self.mcr()));
        }
        self
    }

    #[doc="Get the *mut pointer for the MSR register."]
    #[inline] pub fn msr_mut(&self) -> *mut Msr { 
        (self.0 + 0x4) as *mut Msr
    }

    #[doc="Get the *const pointer for the MSR register."]
    #[inline] pub fn msr_ptr(&self) -> *const Msr { 
           self.msr_mut()
    }

    #[doc="Read the MSR register."]
    #[inline] pub fn msr(&self) -> Msr { 
        unsafe {
            read_volatile(self.msr_ptr())
        }
    }

    #[doc="Write the MSR register."]
    #[inline] pub fn set_msr<F: FnOnce(Msr) -> Msr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.msr_mut(), f(Msr(0)));
        }
        self
    }

    #[doc="Modify the MSR register."]
    #[inline] pub fn with_msr<F: FnOnce(Msr) -> Msr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.msr_mut(), f(self.msr()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TSR register."]
    #[inline] pub fn tsr_mut(&self) -> *mut Tsr { 
        (self.0 + 0x8) as *mut Tsr
    }

    #[doc="Get the *const pointer for the TSR register."]
    #[inline] pub fn tsr_ptr(&self) -> *const Tsr { 
           self.tsr_mut()
    }

    #[doc="Read the TSR register."]
    #[inline] pub fn tsr(&self) -> Tsr { 
        unsafe {
            read_volatile(self.tsr_ptr())
        }
    }

    #[doc="Write the TSR register."]
    #[inline] pub fn set_tsr<F: FnOnce(Tsr) -> Tsr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tsr_mut(), f(Tsr(0)));
        }
        self
    }

    #[doc="Modify the TSR register."]
    #[inline] pub fn with_tsr<F: FnOnce(Tsr) -> Tsr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tsr_mut(), f(self.tsr()));
        }
        self
    }

    #[doc="Get the *mut pointer for the RF0R register."]
    #[inline] pub fn rf0r_mut(&self) -> *mut Rf0r { 
        (self.0 + 0xc) as *mut Rf0r
    }

    #[doc="Get the *const pointer for the RF0R register."]
    #[inline] pub fn rf0r_ptr(&self) -> *const Rf0r { 
           self.rf0r_mut()
    }

    #[doc="Read the RF0R register."]
    #[inline] pub fn rf0r(&self) -> Rf0r { 
        unsafe {
            read_volatile(self.rf0r_ptr())
        }
    }

    #[doc="Write the RF0R register."]
    #[inline] pub fn set_rf0r<F: FnOnce(Rf0r) -> Rf0r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.rf0r_mut(), f(Rf0r(0)));
        }
        self
    }

    #[doc="Modify the RF0R register."]
    #[inline] pub fn with_rf0r<F: FnOnce(Rf0r) -> Rf0r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.rf0r_mut(), f(self.rf0r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the RF1R register."]
    #[inline] pub fn rf1r_mut(&self) -> *mut Rf1r { 
        (self.0 + 0x10) as *mut Rf1r
    }

    #[doc="Get the *const pointer for the RF1R register."]
    #[inline] pub fn rf1r_ptr(&self) -> *const Rf1r { 
           self.rf1r_mut()
    }

    #[doc="Read the RF1R register."]
    #[inline] pub fn rf1r(&self) -> Rf1r { 
        unsafe {
            read_volatile(self.rf1r_ptr())
        }
    }

    #[doc="Write the RF1R register."]
    #[inline] pub fn set_rf1r<F: FnOnce(Rf1r) -> Rf1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.rf1r_mut(), f(Rf1r(0)));
        }
        self
    }

    #[doc="Modify the RF1R register."]
    #[inline] pub fn with_rf1r<F: FnOnce(Rf1r) -> Rf1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.rf1r_mut(), f(self.rf1r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the IER register."]
    #[inline] pub fn ier_mut(&self) -> *mut Ier { 
        (self.0 + 0x14) as *mut Ier
    }

    #[doc="Get the *const pointer for the IER register."]
    #[inline] pub fn ier_ptr(&self) -> *const Ier { 
           self.ier_mut()
    }

    #[doc="Read the IER register."]
    #[inline] pub fn ier(&self) -> Ier { 
        unsafe {
            read_volatile(self.ier_ptr())
        }
    }

    #[doc="Write the IER register."]
    #[inline] pub fn set_ier<F: FnOnce(Ier) -> Ier>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.ier_mut(), f(Ier(0)));
        }
        self
    }

    #[doc="Modify the IER register."]
    #[inline] pub fn with_ier<F: FnOnce(Ier) -> Ier>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.ier_mut(), f(self.ier()));
        }
        self
    }

    #[doc="Get the *mut pointer for the ESR register."]
    #[inline] pub fn esr_mut(&self) -> *mut Esr { 
        (self.0 + 0x18) as *mut Esr
    }

    #[doc="Get the *const pointer for the ESR register."]
    #[inline] pub fn esr_ptr(&self) -> *const Esr { 
           self.esr_mut()
    }

    #[doc="Read the ESR register."]
    #[inline] pub fn esr(&self) -> Esr { 
        unsafe {
            read_volatile(self.esr_ptr())
        }
    }

    #[doc="Write the ESR register."]
    #[inline] pub fn set_esr<F: FnOnce(Esr) -> Esr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.esr_mut(), f(Esr(0)));
        }
        self
    }

    #[doc="Modify the ESR register."]
    #[inline] pub fn with_esr<F: FnOnce(Esr) -> Esr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.esr_mut(), f(self.esr()));
        }
        self
    }

    #[doc="Get the *mut pointer for the BTR register."]
    #[inline] pub fn btr_mut(&self) -> *mut Btr { 
        (self.0 + 0x1c) as *mut Btr
    }

    #[doc="Get the *const pointer for the BTR register."]
    #[inline] pub fn btr_ptr(&self) -> *const Btr { 
           self.btr_mut()
    }

    #[doc="Read the BTR register."]
    #[inline] pub fn btr(&self) -> Btr { 
        unsafe {
            read_volatile(self.btr_ptr())
        }
    }

    #[doc="Write the BTR register."]
    #[inline] pub fn set_btr<F: FnOnce(Btr) -> Btr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.btr_mut(), f(Btr(0)));
        }
        self
    }

    #[doc="Modify the BTR register."]
    #[inline] pub fn with_btr<F: FnOnce(Btr) -> Btr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.btr_mut(), f(self.btr()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TI0R register."]
    #[inline] pub fn ti0r_mut(&self) -> *mut Ti0r { 
        (self.0 + 0x180) as *mut Ti0r
    }

    #[doc="Get the *const pointer for the TI0R register."]
    #[inline] pub fn ti0r_ptr(&self) -> *const Ti0r { 
           self.ti0r_mut()
    }

    #[doc="Read the TI0R register."]
    #[inline] pub fn ti0r(&self) -> Ti0r { 
        unsafe {
            read_volatile(self.ti0r_ptr())
        }
    }

    #[doc="Write the TI0R register."]
    #[inline] pub fn set_ti0r<F: FnOnce(Ti0r) -> Ti0r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.ti0r_mut(), f(Ti0r(0)));
        }
        self
    }

    #[doc="Modify the TI0R register."]
    #[inline] pub fn with_ti0r<F: FnOnce(Ti0r) -> Ti0r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.ti0r_mut(), f(self.ti0r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TDT0R register."]
    #[inline] pub fn tdt0r_mut(&self) -> *mut Tdt0r { 
        (self.0 + 0x184) as *mut Tdt0r
    }

    #[doc="Get the *const pointer for the TDT0R register."]
    #[inline] pub fn tdt0r_ptr(&self) -> *const Tdt0r { 
           self.tdt0r_mut()
    }

    #[doc="Read the TDT0R register."]
    #[inline] pub fn tdt0r(&self) -> Tdt0r { 
        unsafe {
            read_volatile(self.tdt0r_ptr())
        }
    }

    #[doc="Write the TDT0R register."]
    #[inline] pub fn set_tdt0r<F: FnOnce(Tdt0r) -> Tdt0r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdt0r_mut(), f(Tdt0r(0)));
        }
        self
    }

    #[doc="Modify the TDT0R register."]
    #[inline] pub fn with_tdt0r<F: FnOnce(Tdt0r) -> Tdt0r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdt0r_mut(), f(self.tdt0r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TDL0R register."]
    #[inline] pub fn tdl0r_mut(&self) -> *mut Tdl0r { 
        (self.0 + 0x188) as *mut Tdl0r
    }

    #[doc="Get the *const pointer for the TDL0R register."]
    #[inline] pub fn tdl0r_ptr(&self) -> *const Tdl0r { 
           self.tdl0r_mut()
    }

    #[doc="Read the TDL0R register."]
    #[inline] pub fn tdl0r(&self) -> Tdl0r { 
        unsafe {
            read_volatile(self.tdl0r_ptr())
        }
    }

    #[doc="Write the TDL0R register."]
    #[inline] pub fn set_tdl0r<F: FnOnce(Tdl0r) -> Tdl0r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdl0r_mut(), f(Tdl0r(0)));
        }
        self
    }

    #[doc="Modify the TDL0R register."]
    #[inline] pub fn with_tdl0r<F: FnOnce(Tdl0r) -> Tdl0r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdl0r_mut(), f(self.tdl0r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TDH0R register."]
    #[inline] pub fn tdh0r_mut(&self) -> *mut Tdh0r { 
        (self.0 + 0x18c) as *mut Tdh0r
    }

    #[doc="Get the *const pointer for the TDH0R register."]
    #[inline] pub fn tdh0r_ptr(&self) -> *const Tdh0r { 
           self.tdh0r_mut()
    }

    #[doc="Read the TDH0R register."]
    #[inline] pub fn tdh0r(&self) -> Tdh0r { 
        unsafe {
            read_volatile(self.tdh0r_ptr())
        }
    }

    #[doc="Write the TDH0R register."]
    #[inline] pub fn set_tdh0r<F: FnOnce(Tdh0r) -> Tdh0r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdh0r_mut(), f(Tdh0r(0)));
        }
        self
    }

    #[doc="Modify the TDH0R register."]
    #[inline] pub fn with_tdh0r<F: FnOnce(Tdh0r) -> Tdh0r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdh0r_mut(), f(self.tdh0r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TI1R register."]
    #[inline] pub fn ti1r_mut(&self) -> *mut Ti1r { 
        (self.0 + 0x190) as *mut Ti1r
    }

    #[doc="Get the *const pointer for the TI1R register."]
    #[inline] pub fn ti1r_ptr(&self) -> *const Ti1r { 
           self.ti1r_mut()
    }

    #[doc="Read the TI1R register."]
    #[inline] pub fn ti1r(&self) -> Ti1r { 
        unsafe {
            read_volatile(self.ti1r_ptr())
        }
    }

    #[doc="Write the TI1R register."]
    #[inline] pub fn set_ti1r<F: FnOnce(Ti1r) -> Ti1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.ti1r_mut(), f(Ti1r(0)));
        }
        self
    }

    #[doc="Modify the TI1R register."]
    #[inline] pub fn with_ti1r<F: FnOnce(Ti1r) -> Ti1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.ti1r_mut(), f(self.ti1r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TDT1R register."]
    #[inline] pub fn tdt1r_mut(&self) -> *mut Tdt1r { 
        (self.0 + 0x194) as *mut Tdt1r
    }

    #[doc="Get the *const pointer for the TDT1R register."]
    #[inline] pub fn tdt1r_ptr(&self) -> *const Tdt1r { 
           self.tdt1r_mut()
    }

    #[doc="Read the TDT1R register."]
    #[inline] pub fn tdt1r(&self) -> Tdt1r { 
        unsafe {
            read_volatile(self.tdt1r_ptr())
        }
    }

    #[doc="Write the TDT1R register."]
    #[inline] pub fn set_tdt1r<F: FnOnce(Tdt1r) -> Tdt1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdt1r_mut(), f(Tdt1r(0)));
        }
        self
    }

    #[doc="Modify the TDT1R register."]
    #[inline] pub fn with_tdt1r<F: FnOnce(Tdt1r) -> Tdt1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdt1r_mut(), f(self.tdt1r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TDL1R register."]
    #[inline] pub fn tdl1r_mut(&self) -> *mut Tdl1r { 
        (self.0 + 0x198) as *mut Tdl1r
    }

    #[doc="Get the *const pointer for the TDL1R register."]
    #[inline] pub fn tdl1r_ptr(&self) -> *const Tdl1r { 
           self.tdl1r_mut()
    }

    #[doc="Read the TDL1R register."]
    #[inline] pub fn tdl1r(&self) -> Tdl1r { 
        unsafe {
            read_volatile(self.tdl1r_ptr())
        }
    }

    #[doc="Write the TDL1R register."]
    #[inline] pub fn set_tdl1r<F: FnOnce(Tdl1r) -> Tdl1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdl1r_mut(), f(Tdl1r(0)));
        }
        self
    }

    #[doc="Modify the TDL1R register."]
    #[inline] pub fn with_tdl1r<F: FnOnce(Tdl1r) -> Tdl1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdl1r_mut(), f(self.tdl1r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TDH1R register."]
    #[inline] pub fn tdh1r_mut(&self) -> *mut Tdh1r { 
        (self.0 + 0x19c) as *mut Tdh1r
    }

    #[doc="Get the *const pointer for the TDH1R register."]
    #[inline] pub fn tdh1r_ptr(&self) -> *const Tdh1r { 
           self.tdh1r_mut()
    }

    #[doc="Read the TDH1R register."]
    #[inline] pub fn tdh1r(&self) -> Tdh1r { 
        unsafe {
            read_volatile(self.tdh1r_ptr())
        }
    }

    #[doc="Write the TDH1R register."]
    #[inline] pub fn set_tdh1r<F: FnOnce(Tdh1r) -> Tdh1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdh1r_mut(), f(Tdh1r(0)));
        }
        self
    }

    #[doc="Modify the TDH1R register."]
    #[inline] pub fn with_tdh1r<F: FnOnce(Tdh1r) -> Tdh1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdh1r_mut(), f(self.tdh1r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TI2R register."]
    #[inline] pub fn ti2r_mut(&self) -> *mut Ti2r { 
        (self.0 + 0x1a0) as *mut Ti2r
    }

    #[doc="Get the *const pointer for the TI2R register."]
    #[inline] pub fn ti2r_ptr(&self) -> *const Ti2r { 
           self.ti2r_mut()
    }

    #[doc="Read the TI2R register."]
    #[inline] pub fn ti2r(&self) -> Ti2r { 
        unsafe {
            read_volatile(self.ti2r_ptr())
        }
    }

    #[doc="Write the TI2R register."]
    #[inline] pub fn set_ti2r<F: FnOnce(Ti2r) -> Ti2r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.ti2r_mut(), f(Ti2r(0)));
        }
        self
    }

    #[doc="Modify the TI2R register."]
    #[inline] pub fn with_ti2r<F: FnOnce(Ti2r) -> Ti2r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.ti2r_mut(), f(self.ti2r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TDT2R register."]
    #[inline] pub fn tdt2r_mut(&self) -> *mut Tdt2r { 
        (self.0 + 0x1a4) as *mut Tdt2r
    }

    #[doc="Get the *const pointer for the TDT2R register."]
    #[inline] pub fn tdt2r_ptr(&self) -> *const Tdt2r { 
           self.tdt2r_mut()
    }

    #[doc="Read the TDT2R register."]
    #[inline] pub fn tdt2r(&self) -> Tdt2r { 
        unsafe {
            read_volatile(self.tdt2r_ptr())
        }
    }

    #[doc="Write the TDT2R register."]
    #[inline] pub fn set_tdt2r<F: FnOnce(Tdt2r) -> Tdt2r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdt2r_mut(), f(Tdt2r(0)));
        }
        self
    }

    #[doc="Modify the TDT2R register."]
    #[inline] pub fn with_tdt2r<F: FnOnce(Tdt2r) -> Tdt2r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdt2r_mut(), f(self.tdt2r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TDL2R register."]
    #[inline] pub fn tdl2r_mut(&self) -> *mut Tdl2r { 
        (self.0 + 0x1a8) as *mut Tdl2r
    }

    #[doc="Get the *const pointer for the TDL2R register."]
    #[inline] pub fn tdl2r_ptr(&self) -> *const Tdl2r { 
           self.tdl2r_mut()
    }

    #[doc="Read the TDL2R register."]
    #[inline] pub fn tdl2r(&self) -> Tdl2r { 
        unsafe {
            read_volatile(self.tdl2r_ptr())
        }
    }

    #[doc="Write the TDL2R register."]
    #[inline] pub fn set_tdl2r<F: FnOnce(Tdl2r) -> Tdl2r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdl2r_mut(), f(Tdl2r(0)));
        }
        self
    }

    #[doc="Modify the TDL2R register."]
    #[inline] pub fn with_tdl2r<F: FnOnce(Tdl2r) -> Tdl2r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdl2r_mut(), f(self.tdl2r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the TDH2R register."]
    #[inline] pub fn tdh2r_mut(&self) -> *mut Tdh2r { 
        (self.0 + 0x1ac) as *mut Tdh2r
    }

    #[doc="Get the *const pointer for the TDH2R register."]
    #[inline] pub fn tdh2r_ptr(&self) -> *const Tdh2r { 
           self.tdh2r_mut()
    }

    #[doc="Read the TDH2R register."]
    #[inline] pub fn tdh2r(&self) -> Tdh2r { 
        unsafe {
            read_volatile(self.tdh2r_ptr())
        }
    }

    #[doc="Write the TDH2R register."]
    #[inline] pub fn set_tdh2r<F: FnOnce(Tdh2r) -> Tdh2r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdh2r_mut(), f(Tdh2r(0)));
        }
        self
    }

    #[doc="Modify the TDH2R register."]
    #[inline] pub fn with_tdh2r<F: FnOnce(Tdh2r) -> Tdh2r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.tdh2r_mut(), f(self.tdh2r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the RI0R register."]
    #[inline] pub fn ri0r_mut(&self) -> *mut Ri0r { 
        (self.0 + 0x1b0) as *mut Ri0r
    }

    #[doc="Get the *const pointer for the RI0R register."]
    #[inline] pub fn ri0r_ptr(&self) -> *const Ri0r { 
           self.ri0r_mut()
    }

    #[doc="Read the RI0R register."]
    #[inline] pub fn ri0r(&self) -> Ri0r { 
        unsafe {
            read_volatile(self.ri0r_ptr())
        }
    }

    #[doc="Get the *mut pointer for the RDT0R register."]
    #[inline] pub fn rdt0r_mut(&self) -> *mut Rdt0r { 
        (self.0 + 0x1b4) as *mut Rdt0r
    }

    #[doc="Get the *const pointer for the RDT0R register."]
    #[inline] pub fn rdt0r_ptr(&self) -> *const Rdt0r { 
           self.rdt0r_mut()
    }

    #[doc="Read the RDT0R register."]
    #[inline] pub fn rdt0r(&self) -> Rdt0r { 
        unsafe {
            read_volatile(self.rdt0r_ptr())
        }
    }

    #[doc="Get the *mut pointer for the RDL0R register."]
    #[inline] pub fn rdl0r_mut(&self) -> *mut Rdl0r { 
        (self.0 + 0x1b8) as *mut Rdl0r
    }

    #[doc="Get the *const pointer for the RDL0R register."]
    #[inline] pub fn rdl0r_ptr(&self) -> *const Rdl0r { 
           self.rdl0r_mut()
    }

    #[doc="Read the RDL0R register."]
    #[inline] pub fn rdl0r(&self) -> Rdl0r { 
        unsafe {
            read_volatile(self.rdl0r_ptr())
        }
    }

    #[doc="Get the *mut pointer for the RDH0R register."]
    #[inline] pub fn rdh0r_mut(&self) -> *mut Rdh0r { 
        (self.0 + 0x1bc) as *mut Rdh0r
    }

    #[doc="Get the *const pointer for the RDH0R register."]
    #[inline] pub fn rdh0r_ptr(&self) -> *const Rdh0r { 
           self.rdh0r_mut()
    }

    #[doc="Read the RDH0R register."]
    #[inline] pub fn rdh0r(&self) -> Rdh0r { 
        unsafe {
            read_volatile(self.rdh0r_ptr())
        }
    }

    #[doc="Get the *mut pointer for the RI1R register."]
    #[inline] pub fn ri1r_mut(&self) -> *mut Ri1r { 
        (self.0 + 0x1c0) as *mut Ri1r
    }

    #[doc="Get the *const pointer for the RI1R register."]
    #[inline] pub fn ri1r_ptr(&self) -> *const Ri1r { 
           self.ri1r_mut()
    }

    #[doc="Read the RI1R register."]
    #[inline] pub fn ri1r(&self) -> Ri1r { 
        unsafe {
            read_volatile(self.ri1r_ptr())
        }
    }

    #[doc="Get the *mut pointer for the RDT1R register."]
    #[inline] pub fn rdt1r_mut(&self) -> *mut Rdt1r { 
        (self.0 + 0x1c4) as *mut Rdt1r
    }

    #[doc="Get the *const pointer for the RDT1R register."]
    #[inline] pub fn rdt1r_ptr(&self) -> *const Rdt1r { 
           self.rdt1r_mut()
    }

    #[doc="Read the RDT1R register."]
    #[inline] pub fn rdt1r(&self) -> Rdt1r { 
        unsafe {
            read_volatile(self.rdt1r_ptr())
        }
    }

    #[doc="Get the *mut pointer for the RDL1R register."]
    #[inline] pub fn rdl1r_mut(&self) -> *mut Rdl1r { 
        (self.0 + 0x1c8) as *mut Rdl1r
    }

    #[doc="Get the *const pointer for the RDL1R register."]
    #[inline] pub fn rdl1r_ptr(&self) -> *const Rdl1r { 
           self.rdl1r_mut()
    }

    #[doc="Read the RDL1R register."]
    #[inline] pub fn rdl1r(&self) -> Rdl1r { 
        unsafe {
            read_volatile(self.rdl1r_ptr())
        }
    }

    #[doc="Get the *mut pointer for the RDH1R register."]
    #[inline] pub fn rdh1r_mut(&self) -> *mut Rdh1r { 
        (self.0 + 0x1cc) as *mut Rdh1r
    }

    #[doc="Get the *const pointer for the RDH1R register."]
    #[inline] pub fn rdh1r_ptr(&self) -> *const Rdh1r { 
           self.rdh1r_mut()
    }

    #[doc="Read the RDH1R register."]
    #[inline] pub fn rdh1r(&self) -> Rdh1r { 
        unsafe {
            read_volatile(self.rdh1r_ptr())
        }
    }

    #[doc="Get the *mut pointer for the FMR register."]
    #[inline] pub fn fmr_mut(&self) -> *mut Fmr { 
        (self.0 + 0x200) as *mut Fmr
    }

    #[doc="Get the *const pointer for the FMR register."]
    #[inline] pub fn fmr_ptr(&self) -> *const Fmr { 
           self.fmr_mut()
    }

    #[doc="Read the FMR register."]
    #[inline] pub fn fmr(&self) -> Fmr { 
        unsafe {
            read_volatile(self.fmr_ptr())
        }
    }

    #[doc="Write the FMR register."]
    #[inline] pub fn set_fmr<F: FnOnce(Fmr) -> Fmr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.fmr_mut(), f(Fmr(0)));
        }
        self
    }

    #[doc="Modify the FMR register."]
    #[inline] pub fn with_fmr<F: FnOnce(Fmr) -> Fmr>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.fmr_mut(), f(self.fmr()));
        }
        self
    }

    #[doc="Get the *mut pointer for the FM1R register."]
    #[inline] pub fn fm1r_mut(&self) -> *mut Fm1r { 
        (self.0 + 0x204) as *mut Fm1r
    }

    #[doc="Get the *const pointer for the FM1R register."]
    #[inline] pub fn fm1r_ptr(&self) -> *const Fm1r { 
           self.fm1r_mut()
    }

    #[doc="Read the FM1R register."]
    #[inline] pub fn fm1r(&self) -> Fm1r { 
        unsafe {
            read_volatile(self.fm1r_ptr())
        }
    }

    #[doc="Write the FM1R register."]
    #[inline] pub fn set_fm1r<F: FnOnce(Fm1r) -> Fm1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.fm1r_mut(), f(Fm1r(0)));
        }
        self
    }

    #[doc="Modify the FM1R register."]
    #[inline] pub fn with_fm1r<F: FnOnce(Fm1r) -> Fm1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.fm1r_mut(), f(self.fm1r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the FS1R register."]
    #[inline] pub fn fs1r_mut(&self) -> *mut Fs1r { 
        (self.0 + 0x20c) as *mut Fs1r
    }

    #[doc="Get the *const pointer for the FS1R register."]
    #[inline] pub fn fs1r_ptr(&self) -> *const Fs1r { 
           self.fs1r_mut()
    }

    #[doc="Read the FS1R register."]
    #[inline] pub fn fs1r(&self) -> Fs1r { 
        unsafe {
            read_volatile(self.fs1r_ptr())
        }
    }

    #[doc="Write the FS1R register."]
    #[inline] pub fn set_fs1r<F: FnOnce(Fs1r) -> Fs1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.fs1r_mut(), f(Fs1r(0)));
        }
        self
    }

    #[doc="Modify the FS1R register."]
    #[inline] pub fn with_fs1r<F: FnOnce(Fs1r) -> Fs1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.fs1r_mut(), f(self.fs1r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the FFA1R register."]
    #[inline] pub fn ffa1r_mut(&self) -> *mut Ffa1r { 
        (self.0 + 0x214) as *mut Ffa1r
    }

    #[doc="Get the *const pointer for the FFA1R register."]
    #[inline] pub fn ffa1r_ptr(&self) -> *const Ffa1r { 
           self.ffa1r_mut()
    }

    #[doc="Read the FFA1R register."]
    #[inline] pub fn ffa1r(&self) -> Ffa1r { 
        unsafe {
            read_volatile(self.ffa1r_ptr())
        }
    }

    #[doc="Write the FFA1R register."]
    #[inline] pub fn set_ffa1r<F: FnOnce(Ffa1r) -> Ffa1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.ffa1r_mut(), f(Ffa1r(0)));
        }
        self
    }

    #[doc="Modify the FFA1R register."]
    #[inline] pub fn with_ffa1r<F: FnOnce(Ffa1r) -> Ffa1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.ffa1r_mut(), f(self.ffa1r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the FA1R register."]
    #[inline] pub fn fa1r_mut(&self) -> *mut Fa1r { 
        (self.0 + 0x21c) as *mut Fa1r
    }

    #[doc="Get the *const pointer for the FA1R register."]
    #[inline] pub fn fa1r_ptr(&self) -> *const Fa1r { 
           self.fa1r_mut()
    }

    #[doc="Read the FA1R register."]
    #[inline] pub fn fa1r(&self) -> Fa1r { 
        unsafe {
            read_volatile(self.fa1r_ptr())
        }
    }

    #[doc="Write the FA1R register."]
    #[inline] pub fn set_fa1r<F: FnOnce(Fa1r) -> Fa1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.fa1r_mut(), f(Fa1r(0)));
        }
        self
    }

    #[doc="Modify the FA1R register."]
    #[inline] pub fn with_fa1r<F: FnOnce(Fa1r) -> Fa1r>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.fa1r_mut(), f(self.fa1r()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F0R1 register."]
    #[inline] pub fn f0r1_mut(&self) -> *mut F0r1 { 
        (self.0 + 0x240) as *mut F0r1
    }

    #[doc="Get the *const pointer for the F0R1 register."]
    #[inline] pub fn f0r1_ptr(&self) -> *const F0r1 { 
           self.f0r1_mut()
    }

    #[doc="Read the F0R1 register."]
    #[inline] pub fn f0r1(&self) -> F0r1 { 
        unsafe {
            read_volatile(self.f0r1_ptr())
        }
    }

    #[doc="Write the F0R1 register."]
    #[inline] pub fn set_f0r1<F: FnOnce(F0r1) -> F0r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f0r1_mut(), f(F0r1(0)));
        }
        self
    }

    #[doc="Modify the F0R1 register."]
    #[inline] pub fn with_f0r1<F: FnOnce(F0r1) -> F0r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f0r1_mut(), f(self.f0r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F0R2 register."]
    #[inline] pub fn f0r2_mut(&self) -> *mut F0r2 { 
        (self.0 + 0x244) as *mut F0r2
    }

    #[doc="Get the *const pointer for the F0R2 register."]
    #[inline] pub fn f0r2_ptr(&self) -> *const F0r2 { 
           self.f0r2_mut()
    }

    #[doc="Read the F0R2 register."]
    #[inline] pub fn f0r2(&self) -> F0r2 { 
        unsafe {
            read_volatile(self.f0r2_ptr())
        }
    }

    #[doc="Write the F0R2 register."]
    #[inline] pub fn set_f0r2<F: FnOnce(F0r2) -> F0r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f0r2_mut(), f(F0r2(0)));
        }
        self
    }

    #[doc="Modify the F0R2 register."]
    #[inline] pub fn with_f0r2<F: FnOnce(F0r2) -> F0r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f0r2_mut(), f(self.f0r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F1R1 register."]
    #[inline] pub fn f1r1_mut(&self) -> *mut F1r1 { 
        (self.0 + 0x248) as *mut F1r1
    }

    #[doc="Get the *const pointer for the F1R1 register."]
    #[inline] pub fn f1r1_ptr(&self) -> *const F1r1 { 
           self.f1r1_mut()
    }

    #[doc="Read the F1R1 register."]
    #[inline] pub fn f1r1(&self) -> F1r1 { 
        unsafe {
            read_volatile(self.f1r1_ptr())
        }
    }

    #[doc="Write the F1R1 register."]
    #[inline] pub fn set_f1r1<F: FnOnce(F1r1) -> F1r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f1r1_mut(), f(F1r1(0)));
        }
        self
    }

    #[doc="Modify the F1R1 register."]
    #[inline] pub fn with_f1r1<F: FnOnce(F1r1) -> F1r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f1r1_mut(), f(self.f1r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F1R2 register."]
    #[inline] pub fn f1r2_mut(&self) -> *mut F1r2 { 
        (self.0 + 0x24c) as *mut F1r2
    }

    #[doc="Get the *const pointer for the F1R2 register."]
    #[inline] pub fn f1r2_ptr(&self) -> *const F1r2 { 
           self.f1r2_mut()
    }

    #[doc="Read the F1R2 register."]
    #[inline] pub fn f1r2(&self) -> F1r2 { 
        unsafe {
            read_volatile(self.f1r2_ptr())
        }
    }

    #[doc="Write the F1R2 register."]
    #[inline] pub fn set_f1r2<F: FnOnce(F1r2) -> F1r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f1r2_mut(), f(F1r2(0)));
        }
        self
    }

    #[doc="Modify the F1R2 register."]
    #[inline] pub fn with_f1r2<F: FnOnce(F1r2) -> F1r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f1r2_mut(), f(self.f1r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F2R1 register."]
    #[inline] pub fn f2r1_mut(&self) -> *mut F2r1 { 
        (self.0 + 0x250) as *mut F2r1
    }

    #[doc="Get the *const pointer for the F2R1 register."]
    #[inline] pub fn f2r1_ptr(&self) -> *const F2r1 { 
           self.f2r1_mut()
    }

    #[doc="Read the F2R1 register."]
    #[inline] pub fn f2r1(&self) -> F2r1 { 
        unsafe {
            read_volatile(self.f2r1_ptr())
        }
    }

    #[doc="Write the F2R1 register."]
    #[inline] pub fn set_f2r1<F: FnOnce(F2r1) -> F2r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f2r1_mut(), f(F2r1(0)));
        }
        self
    }

    #[doc="Modify the F2R1 register."]
    #[inline] pub fn with_f2r1<F: FnOnce(F2r1) -> F2r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f2r1_mut(), f(self.f2r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F2R2 register."]
    #[inline] pub fn f2r2_mut(&self) -> *mut F2r2 { 
        (self.0 + 0x254) as *mut F2r2
    }

    #[doc="Get the *const pointer for the F2R2 register."]
    #[inline] pub fn f2r2_ptr(&self) -> *const F2r2 { 
           self.f2r2_mut()
    }

    #[doc="Read the F2R2 register."]
    #[inline] pub fn f2r2(&self) -> F2r2 { 
        unsafe {
            read_volatile(self.f2r2_ptr())
        }
    }

    #[doc="Write the F2R2 register."]
    #[inline] pub fn set_f2r2<F: FnOnce(F2r2) -> F2r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f2r2_mut(), f(F2r2(0)));
        }
        self
    }

    #[doc="Modify the F2R2 register."]
    #[inline] pub fn with_f2r2<F: FnOnce(F2r2) -> F2r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f2r2_mut(), f(self.f2r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F3R1 register."]
    #[inline] pub fn f3r1_mut(&self) -> *mut F3r1 { 
        (self.0 + 0x258) as *mut F3r1
    }

    #[doc="Get the *const pointer for the F3R1 register."]
    #[inline] pub fn f3r1_ptr(&self) -> *const F3r1 { 
           self.f3r1_mut()
    }

    #[doc="Read the F3R1 register."]
    #[inline] pub fn f3r1(&self) -> F3r1 { 
        unsafe {
            read_volatile(self.f3r1_ptr())
        }
    }

    #[doc="Write the F3R1 register."]
    #[inline] pub fn set_f3r1<F: FnOnce(F3r1) -> F3r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f3r1_mut(), f(F3r1(0)));
        }
        self
    }

    #[doc="Modify the F3R1 register."]
    #[inline] pub fn with_f3r1<F: FnOnce(F3r1) -> F3r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f3r1_mut(), f(self.f3r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F3R2 register."]
    #[inline] pub fn f3r2_mut(&self) -> *mut F3r2 { 
        (self.0 + 0x25c) as *mut F3r2
    }

    #[doc="Get the *const pointer for the F3R2 register."]
    #[inline] pub fn f3r2_ptr(&self) -> *const F3r2 { 
           self.f3r2_mut()
    }

    #[doc="Read the F3R2 register."]
    #[inline] pub fn f3r2(&self) -> F3r2 { 
        unsafe {
            read_volatile(self.f3r2_ptr())
        }
    }

    #[doc="Write the F3R2 register."]
    #[inline] pub fn set_f3r2<F: FnOnce(F3r2) -> F3r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f3r2_mut(), f(F3r2(0)));
        }
        self
    }

    #[doc="Modify the F3R2 register."]
    #[inline] pub fn with_f3r2<F: FnOnce(F3r2) -> F3r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f3r2_mut(), f(self.f3r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F4R1 register."]
    #[inline] pub fn f4r1_mut(&self) -> *mut F4r1 { 
        (self.0 + 0x260) as *mut F4r1
    }

    #[doc="Get the *const pointer for the F4R1 register."]
    #[inline] pub fn f4r1_ptr(&self) -> *const F4r1 { 
           self.f4r1_mut()
    }

    #[doc="Read the F4R1 register."]
    #[inline] pub fn f4r1(&self) -> F4r1 { 
        unsafe {
            read_volatile(self.f4r1_ptr())
        }
    }

    #[doc="Write the F4R1 register."]
    #[inline] pub fn set_f4r1<F: FnOnce(F4r1) -> F4r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f4r1_mut(), f(F4r1(0)));
        }
        self
    }

    #[doc="Modify the F4R1 register."]
    #[inline] pub fn with_f4r1<F: FnOnce(F4r1) -> F4r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f4r1_mut(), f(self.f4r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F4R2 register."]
    #[inline] pub fn f4r2_mut(&self) -> *mut F4r2 { 
        (self.0 + 0x264) as *mut F4r2
    }

    #[doc="Get the *const pointer for the F4R2 register."]
    #[inline] pub fn f4r2_ptr(&self) -> *const F4r2 { 
           self.f4r2_mut()
    }

    #[doc="Read the F4R2 register."]
    #[inline] pub fn f4r2(&self) -> F4r2 { 
        unsafe {
            read_volatile(self.f4r2_ptr())
        }
    }

    #[doc="Write the F4R2 register."]
    #[inline] pub fn set_f4r2<F: FnOnce(F4r2) -> F4r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f4r2_mut(), f(F4r2(0)));
        }
        self
    }

    #[doc="Modify the F4R2 register."]
    #[inline] pub fn with_f4r2<F: FnOnce(F4r2) -> F4r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f4r2_mut(), f(self.f4r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F5R1 register."]
    #[inline] pub fn f5r1_mut(&self) -> *mut F5r1 { 
        (self.0 + 0x268) as *mut F5r1
    }

    #[doc="Get the *const pointer for the F5R1 register."]
    #[inline] pub fn f5r1_ptr(&self) -> *const F5r1 { 
           self.f5r1_mut()
    }

    #[doc="Read the F5R1 register."]
    #[inline] pub fn f5r1(&self) -> F5r1 { 
        unsafe {
            read_volatile(self.f5r1_ptr())
        }
    }

    #[doc="Write the F5R1 register."]
    #[inline] pub fn set_f5r1<F: FnOnce(F5r1) -> F5r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f5r1_mut(), f(F5r1(0)));
        }
        self
    }

    #[doc="Modify the F5R1 register."]
    #[inline] pub fn with_f5r1<F: FnOnce(F5r1) -> F5r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f5r1_mut(), f(self.f5r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F5R2 register."]
    #[inline] pub fn f5r2_mut(&self) -> *mut F5r2 { 
        (self.0 + 0x26c) as *mut F5r2
    }

    #[doc="Get the *const pointer for the F5R2 register."]
    #[inline] pub fn f5r2_ptr(&self) -> *const F5r2 { 
           self.f5r2_mut()
    }

    #[doc="Read the F5R2 register."]
    #[inline] pub fn f5r2(&self) -> F5r2 { 
        unsafe {
            read_volatile(self.f5r2_ptr())
        }
    }

    #[doc="Write the F5R2 register."]
    #[inline] pub fn set_f5r2<F: FnOnce(F5r2) -> F5r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f5r2_mut(), f(F5r2(0)));
        }
        self
    }

    #[doc="Modify the F5R2 register."]
    #[inline] pub fn with_f5r2<F: FnOnce(F5r2) -> F5r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f5r2_mut(), f(self.f5r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F6R1 register."]
    #[inline] pub fn f6r1_mut(&self) -> *mut F6r1 { 
        (self.0 + 0x270) as *mut F6r1
    }

    #[doc="Get the *const pointer for the F6R1 register."]
    #[inline] pub fn f6r1_ptr(&self) -> *const F6r1 { 
           self.f6r1_mut()
    }

    #[doc="Read the F6R1 register."]
    #[inline] pub fn f6r1(&self) -> F6r1 { 
        unsafe {
            read_volatile(self.f6r1_ptr())
        }
    }

    #[doc="Write the F6R1 register."]
    #[inline] pub fn set_f6r1<F: FnOnce(F6r1) -> F6r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f6r1_mut(), f(F6r1(0)));
        }
        self
    }

    #[doc="Modify the F6R1 register."]
    #[inline] pub fn with_f6r1<F: FnOnce(F6r1) -> F6r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f6r1_mut(), f(self.f6r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F6R2 register."]
    #[inline] pub fn f6r2_mut(&self) -> *mut F6r2 { 
        (self.0 + 0x274) as *mut F6r2
    }

    #[doc="Get the *const pointer for the F6R2 register."]
    #[inline] pub fn f6r2_ptr(&self) -> *const F6r2 { 
           self.f6r2_mut()
    }

    #[doc="Read the F6R2 register."]
    #[inline] pub fn f6r2(&self) -> F6r2 { 
        unsafe {
            read_volatile(self.f6r2_ptr())
        }
    }

    #[doc="Write the F6R2 register."]
    #[inline] pub fn set_f6r2<F: FnOnce(F6r2) -> F6r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f6r2_mut(), f(F6r2(0)));
        }
        self
    }

    #[doc="Modify the F6R2 register."]
    #[inline] pub fn with_f6r2<F: FnOnce(F6r2) -> F6r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f6r2_mut(), f(self.f6r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F7R1 register."]
    #[inline] pub fn f7r1_mut(&self) -> *mut F7r1 { 
        (self.0 + 0x278) as *mut F7r1
    }

    #[doc="Get the *const pointer for the F7R1 register."]
    #[inline] pub fn f7r1_ptr(&self) -> *const F7r1 { 
           self.f7r1_mut()
    }

    #[doc="Read the F7R1 register."]
    #[inline] pub fn f7r1(&self) -> F7r1 { 
        unsafe {
            read_volatile(self.f7r1_ptr())
        }
    }

    #[doc="Write the F7R1 register."]
    #[inline] pub fn set_f7r1<F: FnOnce(F7r1) -> F7r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f7r1_mut(), f(F7r1(0)));
        }
        self
    }

    #[doc="Modify the F7R1 register."]
    #[inline] pub fn with_f7r1<F: FnOnce(F7r1) -> F7r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f7r1_mut(), f(self.f7r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F7R2 register."]
    #[inline] pub fn f7r2_mut(&self) -> *mut F7r2 { 
        (self.0 + 0x27c) as *mut F7r2
    }

    #[doc="Get the *const pointer for the F7R2 register."]
    #[inline] pub fn f7r2_ptr(&self) -> *const F7r2 { 
           self.f7r2_mut()
    }

    #[doc="Read the F7R2 register."]
    #[inline] pub fn f7r2(&self) -> F7r2 { 
        unsafe {
            read_volatile(self.f7r2_ptr())
        }
    }

    #[doc="Write the F7R2 register."]
    #[inline] pub fn set_f7r2<F: FnOnce(F7r2) -> F7r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f7r2_mut(), f(F7r2(0)));
        }
        self
    }

    #[doc="Modify the F7R2 register."]
    #[inline] pub fn with_f7r2<F: FnOnce(F7r2) -> F7r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f7r2_mut(), f(self.f7r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F8R1 register."]
    #[inline] pub fn f8r1_mut(&self) -> *mut F8r1 { 
        (self.0 + 0x280) as *mut F8r1
    }

    #[doc="Get the *const pointer for the F8R1 register."]
    #[inline] pub fn f8r1_ptr(&self) -> *const F8r1 { 
           self.f8r1_mut()
    }

    #[doc="Read the F8R1 register."]
    #[inline] pub fn f8r1(&self) -> F8r1 { 
        unsafe {
            read_volatile(self.f8r1_ptr())
        }
    }

    #[doc="Write the F8R1 register."]
    #[inline] pub fn set_f8r1<F: FnOnce(F8r1) -> F8r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f8r1_mut(), f(F8r1(0)));
        }
        self
    }

    #[doc="Modify the F8R1 register."]
    #[inline] pub fn with_f8r1<F: FnOnce(F8r1) -> F8r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f8r1_mut(), f(self.f8r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F8R2 register."]
    #[inline] pub fn f8r2_mut(&self) -> *mut F8r2 { 
        (self.0 + 0x284) as *mut F8r2
    }

    #[doc="Get the *const pointer for the F8R2 register."]
    #[inline] pub fn f8r2_ptr(&self) -> *const F8r2 { 
           self.f8r2_mut()
    }

    #[doc="Read the F8R2 register."]
    #[inline] pub fn f8r2(&self) -> F8r2 { 
        unsafe {
            read_volatile(self.f8r2_ptr())
        }
    }

    #[doc="Write the F8R2 register."]
    #[inline] pub fn set_f8r2<F: FnOnce(F8r2) -> F8r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f8r2_mut(), f(F8r2(0)));
        }
        self
    }

    #[doc="Modify the F8R2 register."]
    #[inline] pub fn with_f8r2<F: FnOnce(F8r2) -> F8r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f8r2_mut(), f(self.f8r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F9R1 register."]
    #[inline] pub fn f9r1_mut(&self) -> *mut F9r1 { 
        (self.0 + 0x288) as *mut F9r1
    }

    #[doc="Get the *const pointer for the F9R1 register."]
    #[inline] pub fn f9r1_ptr(&self) -> *const F9r1 { 
           self.f9r1_mut()
    }

    #[doc="Read the F9R1 register."]
    #[inline] pub fn f9r1(&self) -> F9r1 { 
        unsafe {
            read_volatile(self.f9r1_ptr())
        }
    }

    #[doc="Write the F9R1 register."]
    #[inline] pub fn set_f9r1<F: FnOnce(F9r1) -> F9r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f9r1_mut(), f(F9r1(0)));
        }
        self
    }

    #[doc="Modify the F9R1 register."]
    #[inline] pub fn with_f9r1<F: FnOnce(F9r1) -> F9r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f9r1_mut(), f(self.f9r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F9R2 register."]
    #[inline] pub fn f9r2_mut(&self) -> *mut F9r2 { 
        (self.0 + 0x28c) as *mut F9r2
    }

    #[doc="Get the *const pointer for the F9R2 register."]
    #[inline] pub fn f9r2_ptr(&self) -> *const F9r2 { 
           self.f9r2_mut()
    }

    #[doc="Read the F9R2 register."]
    #[inline] pub fn f9r2(&self) -> F9r2 { 
        unsafe {
            read_volatile(self.f9r2_ptr())
        }
    }

    #[doc="Write the F9R2 register."]
    #[inline] pub fn set_f9r2<F: FnOnce(F9r2) -> F9r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f9r2_mut(), f(F9r2(0)));
        }
        self
    }

    #[doc="Modify the F9R2 register."]
    #[inline] pub fn with_f9r2<F: FnOnce(F9r2) -> F9r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f9r2_mut(), f(self.f9r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F10R1 register."]
    #[inline] pub fn f10r1_mut(&self) -> *mut F10r1 { 
        (self.0 + 0x290) as *mut F10r1
    }

    #[doc="Get the *const pointer for the F10R1 register."]
    #[inline] pub fn f10r1_ptr(&self) -> *const F10r1 { 
           self.f10r1_mut()
    }

    #[doc="Read the F10R1 register."]
    #[inline] pub fn f10r1(&self) -> F10r1 { 
        unsafe {
            read_volatile(self.f10r1_ptr())
        }
    }

    #[doc="Write the F10R1 register."]
    #[inline] pub fn set_f10r1<F: FnOnce(F10r1) -> F10r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f10r1_mut(), f(F10r1(0)));
        }
        self
    }

    #[doc="Modify the F10R1 register."]
    #[inline] pub fn with_f10r1<F: FnOnce(F10r1) -> F10r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f10r1_mut(), f(self.f10r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F10R2 register."]
    #[inline] pub fn f10r2_mut(&self) -> *mut F10r2 { 
        (self.0 + 0x294) as *mut F10r2
    }

    #[doc="Get the *const pointer for the F10R2 register."]
    #[inline] pub fn f10r2_ptr(&self) -> *const F10r2 { 
           self.f10r2_mut()
    }

    #[doc="Read the F10R2 register."]
    #[inline] pub fn f10r2(&self) -> F10r2 { 
        unsafe {
            read_volatile(self.f10r2_ptr())
        }
    }

    #[doc="Write the F10R2 register."]
    #[inline] pub fn set_f10r2<F: FnOnce(F10r2) -> F10r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f10r2_mut(), f(F10r2(0)));
        }
        self
    }

    #[doc="Modify the F10R2 register."]
    #[inline] pub fn with_f10r2<F: FnOnce(F10r2) -> F10r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f10r2_mut(), f(self.f10r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F11R1 register."]
    #[inline] pub fn f11r1_mut(&self) -> *mut F11r1 { 
        (self.0 + 0x298) as *mut F11r1
    }

    #[doc="Get the *const pointer for the F11R1 register."]
    #[inline] pub fn f11r1_ptr(&self) -> *const F11r1 { 
           self.f11r1_mut()
    }

    #[doc="Read the F11R1 register."]
    #[inline] pub fn f11r1(&self) -> F11r1 { 
        unsafe {
            read_volatile(self.f11r1_ptr())
        }
    }

    #[doc="Write the F11R1 register."]
    #[inline] pub fn set_f11r1<F: FnOnce(F11r1) -> F11r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f11r1_mut(), f(F11r1(0)));
        }
        self
    }

    #[doc="Modify the F11R1 register."]
    #[inline] pub fn with_f11r1<F: FnOnce(F11r1) -> F11r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f11r1_mut(), f(self.f11r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F11R2 register."]
    #[inline] pub fn f11r2_mut(&self) -> *mut F11r2 { 
        (self.0 + 0x29c) as *mut F11r2
    }

    #[doc="Get the *const pointer for the F11R2 register."]
    #[inline] pub fn f11r2_ptr(&self) -> *const F11r2 { 
           self.f11r2_mut()
    }

    #[doc="Read the F11R2 register."]
    #[inline] pub fn f11r2(&self) -> F11r2 { 
        unsafe {
            read_volatile(self.f11r2_ptr())
        }
    }

    #[doc="Write the F11R2 register."]
    #[inline] pub fn set_f11r2<F: FnOnce(F11r2) -> F11r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f11r2_mut(), f(F11r2(0)));
        }
        self
    }

    #[doc="Modify the F11R2 register."]
    #[inline] pub fn with_f11r2<F: FnOnce(F11r2) -> F11r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f11r2_mut(), f(self.f11r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F12R1 register."]
    #[inline] pub fn f12r1_mut(&self) -> *mut F12r1 { 
        (self.0 + 0x2a0) as *mut F12r1
    }

    #[doc="Get the *const pointer for the F12R1 register."]
    #[inline] pub fn f12r1_ptr(&self) -> *const F12r1 { 
           self.f12r1_mut()
    }

    #[doc="Read the F12R1 register."]
    #[inline] pub fn f12r1(&self) -> F12r1 { 
        unsafe {
            read_volatile(self.f12r1_ptr())
        }
    }

    #[doc="Write the F12R1 register."]
    #[inline] pub fn set_f12r1<F: FnOnce(F12r1) -> F12r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f12r1_mut(), f(F12r1(0)));
        }
        self
    }

    #[doc="Modify the F12R1 register."]
    #[inline] pub fn with_f12r1<F: FnOnce(F12r1) -> F12r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f12r1_mut(), f(self.f12r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F12R2 register."]
    #[inline] pub fn f12r2_mut(&self) -> *mut F12r2 { 
        (self.0 + 0x2a4) as *mut F12r2
    }

    #[doc="Get the *const pointer for the F12R2 register."]
    #[inline] pub fn f12r2_ptr(&self) -> *const F12r2 { 
           self.f12r2_mut()
    }

    #[doc="Read the F12R2 register."]
    #[inline] pub fn f12r2(&self) -> F12r2 { 
        unsafe {
            read_volatile(self.f12r2_ptr())
        }
    }

    #[doc="Write the F12R2 register."]
    #[inline] pub fn set_f12r2<F: FnOnce(F12r2) -> F12r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f12r2_mut(), f(F12r2(0)));
        }
        self
    }

    #[doc="Modify the F12R2 register."]
    #[inline] pub fn with_f12r2<F: FnOnce(F12r2) -> F12r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f12r2_mut(), f(self.f12r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F13R1 register."]
    #[inline] pub fn f13r1_mut(&self) -> *mut F13r1 { 
        (self.0 + 0x2a8) as *mut F13r1
    }

    #[doc="Get the *const pointer for the F13R1 register."]
    #[inline] pub fn f13r1_ptr(&self) -> *const F13r1 { 
           self.f13r1_mut()
    }

    #[doc="Read the F13R1 register."]
    #[inline] pub fn f13r1(&self) -> F13r1 { 
        unsafe {
            read_volatile(self.f13r1_ptr())
        }
    }

    #[doc="Write the F13R1 register."]
    #[inline] pub fn set_f13r1<F: FnOnce(F13r1) -> F13r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f13r1_mut(), f(F13r1(0)));
        }
        self
    }

    #[doc="Modify the F13R1 register."]
    #[inline] pub fn with_f13r1<F: FnOnce(F13r1) -> F13r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f13r1_mut(), f(self.f13r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F13R2 register."]
    #[inline] pub fn f13r2_mut(&self) -> *mut F13r2 { 
        (self.0 + 0x2ac) as *mut F13r2
    }

    #[doc="Get the *const pointer for the F13R2 register."]
    #[inline] pub fn f13r2_ptr(&self) -> *const F13r2 { 
           self.f13r2_mut()
    }

    #[doc="Read the F13R2 register."]
    #[inline] pub fn f13r2(&self) -> F13r2 { 
        unsafe {
            read_volatile(self.f13r2_ptr())
        }
    }

    #[doc="Write the F13R2 register."]
    #[inline] pub fn set_f13r2<F: FnOnce(F13r2) -> F13r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f13r2_mut(), f(F13r2(0)));
        }
        self
    }

    #[doc="Modify the F13R2 register."]
    #[inline] pub fn with_f13r2<F: FnOnce(F13r2) -> F13r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f13r2_mut(), f(self.f13r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F14R1 register."]
    #[inline] pub fn f14r1_mut(&self) -> *mut F14r1 { 
        (self.0 + 0x2b0) as *mut F14r1
    }

    #[doc="Get the *const pointer for the F14R1 register."]
    #[inline] pub fn f14r1_ptr(&self) -> *const F14r1 { 
           self.f14r1_mut()
    }

    #[doc="Read the F14R1 register."]
    #[inline] pub fn f14r1(&self) -> F14r1 { 
        unsafe {
            read_volatile(self.f14r1_ptr())
        }
    }

    #[doc="Write the F14R1 register."]
    #[inline] pub fn set_f14r1<F: FnOnce(F14r1) -> F14r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f14r1_mut(), f(F14r1(0)));
        }
        self
    }

    #[doc="Modify the F14R1 register."]
    #[inline] pub fn with_f14r1<F: FnOnce(F14r1) -> F14r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f14r1_mut(), f(self.f14r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F14R2 register."]
    #[inline] pub fn f14r2_mut(&self) -> *mut F14r2 { 
        (self.0 + 0x2b4) as *mut F14r2
    }

    #[doc="Get the *const pointer for the F14R2 register."]
    #[inline] pub fn f14r2_ptr(&self) -> *const F14r2 { 
           self.f14r2_mut()
    }

    #[doc="Read the F14R2 register."]
    #[inline] pub fn f14r2(&self) -> F14r2 { 
        unsafe {
            read_volatile(self.f14r2_ptr())
        }
    }

    #[doc="Write the F14R2 register."]
    #[inline] pub fn set_f14r2<F: FnOnce(F14r2) -> F14r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f14r2_mut(), f(F14r2(0)));
        }
        self
    }

    #[doc="Modify the F14R2 register."]
    #[inline] pub fn with_f14r2<F: FnOnce(F14r2) -> F14r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f14r2_mut(), f(self.f14r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F15R1 register."]
    #[inline] pub fn f15r1_mut(&self) -> *mut F15r1 { 
        (self.0 + 0x2b8) as *mut F15r1
    }

    #[doc="Get the *const pointer for the F15R1 register."]
    #[inline] pub fn f15r1_ptr(&self) -> *const F15r1 { 
           self.f15r1_mut()
    }

    #[doc="Read the F15R1 register."]
    #[inline] pub fn f15r1(&self) -> F15r1 { 
        unsafe {
            read_volatile(self.f15r1_ptr())
        }
    }

    #[doc="Write the F15R1 register."]
    #[inline] pub fn set_f15r1<F: FnOnce(F15r1) -> F15r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f15r1_mut(), f(F15r1(0)));
        }
        self
    }

    #[doc="Modify the F15R1 register."]
    #[inline] pub fn with_f15r1<F: FnOnce(F15r1) -> F15r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f15r1_mut(), f(self.f15r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F15R2 register."]
    #[inline] pub fn f15r2_mut(&self) -> *mut F15r2 { 
        (self.0 + 0x2bc) as *mut F15r2
    }

    #[doc="Get the *const pointer for the F15R2 register."]
    #[inline] pub fn f15r2_ptr(&self) -> *const F15r2 { 
           self.f15r2_mut()
    }

    #[doc="Read the F15R2 register."]
    #[inline] pub fn f15r2(&self) -> F15r2 { 
        unsafe {
            read_volatile(self.f15r2_ptr())
        }
    }

    #[doc="Write the F15R2 register."]
    #[inline] pub fn set_f15r2<F: FnOnce(F15r2) -> F15r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f15r2_mut(), f(F15r2(0)));
        }
        self
    }

    #[doc="Modify the F15R2 register."]
    #[inline] pub fn with_f15r2<F: FnOnce(F15r2) -> F15r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f15r2_mut(), f(self.f15r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F16R1 register."]
    #[inline] pub fn f16r1_mut(&self) -> *mut F16r1 { 
        (self.0 + 0x2c0) as *mut F16r1
    }

    #[doc="Get the *const pointer for the F16R1 register."]
    #[inline] pub fn f16r1_ptr(&self) -> *const F16r1 { 
           self.f16r1_mut()
    }

    #[doc="Read the F16R1 register."]
    #[inline] pub fn f16r1(&self) -> F16r1 { 
        unsafe {
            read_volatile(self.f16r1_ptr())
        }
    }

    #[doc="Write the F16R1 register."]
    #[inline] pub fn set_f16r1<F: FnOnce(F16r1) -> F16r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f16r1_mut(), f(F16r1(0)));
        }
        self
    }

    #[doc="Modify the F16R1 register."]
    #[inline] pub fn with_f16r1<F: FnOnce(F16r1) -> F16r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f16r1_mut(), f(self.f16r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F16R2 register."]
    #[inline] pub fn f16r2_mut(&self) -> *mut F16r2 { 
        (self.0 + 0x2c4) as *mut F16r2
    }

    #[doc="Get the *const pointer for the F16R2 register."]
    #[inline] pub fn f16r2_ptr(&self) -> *const F16r2 { 
           self.f16r2_mut()
    }

    #[doc="Read the F16R2 register."]
    #[inline] pub fn f16r2(&self) -> F16r2 { 
        unsafe {
            read_volatile(self.f16r2_ptr())
        }
    }

    #[doc="Write the F16R2 register."]
    #[inline] pub fn set_f16r2<F: FnOnce(F16r2) -> F16r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f16r2_mut(), f(F16r2(0)));
        }
        self
    }

    #[doc="Modify the F16R2 register."]
    #[inline] pub fn with_f16r2<F: FnOnce(F16r2) -> F16r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f16r2_mut(), f(self.f16r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F17R1 register."]
    #[inline] pub fn f17r1_mut(&self) -> *mut F17r1 { 
        (self.0 + 0x2c8) as *mut F17r1
    }

    #[doc="Get the *const pointer for the F17R1 register."]
    #[inline] pub fn f17r1_ptr(&self) -> *const F17r1 { 
           self.f17r1_mut()
    }

    #[doc="Read the F17R1 register."]
    #[inline] pub fn f17r1(&self) -> F17r1 { 
        unsafe {
            read_volatile(self.f17r1_ptr())
        }
    }

    #[doc="Write the F17R1 register."]
    #[inline] pub fn set_f17r1<F: FnOnce(F17r1) -> F17r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f17r1_mut(), f(F17r1(0)));
        }
        self
    }

    #[doc="Modify the F17R1 register."]
    #[inline] pub fn with_f17r1<F: FnOnce(F17r1) -> F17r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f17r1_mut(), f(self.f17r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F17R2 register."]
    #[inline] pub fn f17r2_mut(&self) -> *mut F17r2 { 
        (self.0 + 0x2cc) as *mut F17r2
    }

    #[doc="Get the *const pointer for the F17R2 register."]
    #[inline] pub fn f17r2_ptr(&self) -> *const F17r2 { 
           self.f17r2_mut()
    }

    #[doc="Read the F17R2 register."]
    #[inline] pub fn f17r2(&self) -> F17r2 { 
        unsafe {
            read_volatile(self.f17r2_ptr())
        }
    }

    #[doc="Write the F17R2 register."]
    #[inline] pub fn set_f17r2<F: FnOnce(F17r2) -> F17r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f17r2_mut(), f(F17r2(0)));
        }
        self
    }

    #[doc="Modify the F17R2 register."]
    #[inline] pub fn with_f17r2<F: FnOnce(F17r2) -> F17r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f17r2_mut(), f(self.f17r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F18R1 register."]
    #[inline] pub fn f18r1_mut(&self) -> *mut F18r1 { 
        (self.0 + 0x2d0) as *mut F18r1
    }

    #[doc="Get the *const pointer for the F18R1 register."]
    #[inline] pub fn f18r1_ptr(&self) -> *const F18r1 { 
           self.f18r1_mut()
    }

    #[doc="Read the F18R1 register."]
    #[inline] pub fn f18r1(&self) -> F18r1 { 
        unsafe {
            read_volatile(self.f18r1_ptr())
        }
    }

    #[doc="Write the F18R1 register."]
    #[inline] pub fn set_f18r1<F: FnOnce(F18r1) -> F18r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f18r1_mut(), f(F18r1(0)));
        }
        self
    }

    #[doc="Modify the F18R1 register."]
    #[inline] pub fn with_f18r1<F: FnOnce(F18r1) -> F18r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f18r1_mut(), f(self.f18r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F18R2 register."]
    #[inline] pub fn f18r2_mut(&self) -> *mut F18r2 { 
        (self.0 + 0x2d4) as *mut F18r2
    }

    #[doc="Get the *const pointer for the F18R2 register."]
    #[inline] pub fn f18r2_ptr(&self) -> *const F18r2 { 
           self.f18r2_mut()
    }

    #[doc="Read the F18R2 register."]
    #[inline] pub fn f18r2(&self) -> F18r2 { 
        unsafe {
            read_volatile(self.f18r2_ptr())
        }
    }

    #[doc="Write the F18R2 register."]
    #[inline] pub fn set_f18r2<F: FnOnce(F18r2) -> F18r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f18r2_mut(), f(F18r2(0)));
        }
        self
    }

    #[doc="Modify the F18R2 register."]
    #[inline] pub fn with_f18r2<F: FnOnce(F18r2) -> F18r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f18r2_mut(), f(self.f18r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F19R1 register."]
    #[inline] pub fn f19r1_mut(&self) -> *mut F19r1 { 
        (self.0 + 0x2d8) as *mut F19r1
    }

    #[doc="Get the *const pointer for the F19R1 register."]
    #[inline] pub fn f19r1_ptr(&self) -> *const F19r1 { 
           self.f19r1_mut()
    }

    #[doc="Read the F19R1 register."]
    #[inline] pub fn f19r1(&self) -> F19r1 { 
        unsafe {
            read_volatile(self.f19r1_ptr())
        }
    }

    #[doc="Write the F19R1 register."]
    #[inline] pub fn set_f19r1<F: FnOnce(F19r1) -> F19r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f19r1_mut(), f(F19r1(0)));
        }
        self
    }

    #[doc="Modify the F19R1 register."]
    #[inline] pub fn with_f19r1<F: FnOnce(F19r1) -> F19r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f19r1_mut(), f(self.f19r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F19R2 register."]
    #[inline] pub fn f19r2_mut(&self) -> *mut F19r2 { 
        (self.0 + 0x2dc) as *mut F19r2
    }

    #[doc="Get the *const pointer for the F19R2 register."]
    #[inline] pub fn f19r2_ptr(&self) -> *const F19r2 { 
           self.f19r2_mut()
    }

    #[doc="Read the F19R2 register."]
    #[inline] pub fn f19r2(&self) -> F19r2 { 
        unsafe {
            read_volatile(self.f19r2_ptr())
        }
    }

    #[doc="Write the F19R2 register."]
    #[inline] pub fn set_f19r2<F: FnOnce(F19r2) -> F19r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f19r2_mut(), f(F19r2(0)));
        }
        self
    }

    #[doc="Modify the F19R2 register."]
    #[inline] pub fn with_f19r2<F: FnOnce(F19r2) -> F19r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f19r2_mut(), f(self.f19r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F20R1 register."]
    #[inline] pub fn f20r1_mut(&self) -> *mut F20r1 { 
        (self.0 + 0x2e0) as *mut F20r1
    }

    #[doc="Get the *const pointer for the F20R1 register."]
    #[inline] pub fn f20r1_ptr(&self) -> *const F20r1 { 
           self.f20r1_mut()
    }

    #[doc="Read the F20R1 register."]
    #[inline] pub fn f20r1(&self) -> F20r1 { 
        unsafe {
            read_volatile(self.f20r1_ptr())
        }
    }

    #[doc="Write the F20R1 register."]
    #[inline] pub fn set_f20r1<F: FnOnce(F20r1) -> F20r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f20r1_mut(), f(F20r1(0)));
        }
        self
    }

    #[doc="Modify the F20R1 register."]
    #[inline] pub fn with_f20r1<F: FnOnce(F20r1) -> F20r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f20r1_mut(), f(self.f20r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F20R2 register."]
    #[inline] pub fn f20r2_mut(&self) -> *mut F20r2 { 
        (self.0 + 0x2e4) as *mut F20r2
    }

    #[doc="Get the *const pointer for the F20R2 register."]
    #[inline] pub fn f20r2_ptr(&self) -> *const F20r2 { 
           self.f20r2_mut()
    }

    #[doc="Read the F20R2 register."]
    #[inline] pub fn f20r2(&self) -> F20r2 { 
        unsafe {
            read_volatile(self.f20r2_ptr())
        }
    }

    #[doc="Write the F20R2 register."]
    #[inline] pub fn set_f20r2<F: FnOnce(F20r2) -> F20r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f20r2_mut(), f(F20r2(0)));
        }
        self
    }

    #[doc="Modify the F20R2 register."]
    #[inline] pub fn with_f20r2<F: FnOnce(F20r2) -> F20r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f20r2_mut(), f(self.f20r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F21R1 register."]
    #[inline] pub fn f21r1_mut(&self) -> *mut F21r1 { 
        (self.0 + 0x2e8) as *mut F21r1
    }

    #[doc="Get the *const pointer for the F21R1 register."]
    #[inline] pub fn f21r1_ptr(&self) -> *const F21r1 { 
           self.f21r1_mut()
    }

    #[doc="Read the F21R1 register."]
    #[inline] pub fn f21r1(&self) -> F21r1 { 
        unsafe {
            read_volatile(self.f21r1_ptr())
        }
    }

    #[doc="Write the F21R1 register."]
    #[inline] pub fn set_f21r1<F: FnOnce(F21r1) -> F21r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f21r1_mut(), f(F21r1(0)));
        }
        self
    }

    #[doc="Modify the F21R1 register."]
    #[inline] pub fn with_f21r1<F: FnOnce(F21r1) -> F21r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f21r1_mut(), f(self.f21r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F21R2 register."]
    #[inline] pub fn f21r2_mut(&self) -> *mut F21r2 { 
        (self.0 + 0x2ec) as *mut F21r2
    }

    #[doc="Get the *const pointer for the F21R2 register."]
    #[inline] pub fn f21r2_ptr(&self) -> *const F21r2 { 
           self.f21r2_mut()
    }

    #[doc="Read the F21R2 register."]
    #[inline] pub fn f21r2(&self) -> F21r2 { 
        unsafe {
            read_volatile(self.f21r2_ptr())
        }
    }

    #[doc="Write the F21R2 register."]
    #[inline] pub fn set_f21r2<F: FnOnce(F21r2) -> F21r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f21r2_mut(), f(F21r2(0)));
        }
        self
    }

    #[doc="Modify the F21R2 register."]
    #[inline] pub fn with_f21r2<F: FnOnce(F21r2) -> F21r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f21r2_mut(), f(self.f21r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F22R1 register."]
    #[inline] pub fn f22r1_mut(&self) -> *mut F22r1 { 
        (self.0 + 0x2f0) as *mut F22r1
    }

    #[doc="Get the *const pointer for the F22R1 register."]
    #[inline] pub fn f22r1_ptr(&self) -> *const F22r1 { 
           self.f22r1_mut()
    }

    #[doc="Read the F22R1 register."]
    #[inline] pub fn f22r1(&self) -> F22r1 { 
        unsafe {
            read_volatile(self.f22r1_ptr())
        }
    }

    #[doc="Write the F22R1 register."]
    #[inline] pub fn set_f22r1<F: FnOnce(F22r1) -> F22r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f22r1_mut(), f(F22r1(0)));
        }
        self
    }

    #[doc="Modify the F22R1 register."]
    #[inline] pub fn with_f22r1<F: FnOnce(F22r1) -> F22r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f22r1_mut(), f(self.f22r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F22R2 register."]
    #[inline] pub fn f22r2_mut(&self) -> *mut F22r2 { 
        (self.0 + 0x2f4) as *mut F22r2
    }

    #[doc="Get the *const pointer for the F22R2 register."]
    #[inline] pub fn f22r2_ptr(&self) -> *const F22r2 { 
           self.f22r2_mut()
    }

    #[doc="Read the F22R2 register."]
    #[inline] pub fn f22r2(&self) -> F22r2 { 
        unsafe {
            read_volatile(self.f22r2_ptr())
        }
    }

    #[doc="Write the F22R2 register."]
    #[inline] pub fn set_f22r2<F: FnOnce(F22r2) -> F22r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f22r2_mut(), f(F22r2(0)));
        }
        self
    }

    #[doc="Modify the F22R2 register."]
    #[inline] pub fn with_f22r2<F: FnOnce(F22r2) -> F22r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f22r2_mut(), f(self.f22r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F23R1 register."]
    #[inline] pub fn f23r1_mut(&self) -> *mut F23r1 { 
        (self.0 + 0x2f8) as *mut F23r1
    }

    #[doc="Get the *const pointer for the F23R1 register."]
    #[inline] pub fn f23r1_ptr(&self) -> *const F23r1 { 
           self.f23r1_mut()
    }

    #[doc="Read the F23R1 register."]
    #[inline] pub fn f23r1(&self) -> F23r1 { 
        unsafe {
            read_volatile(self.f23r1_ptr())
        }
    }

    #[doc="Write the F23R1 register."]
    #[inline] pub fn set_f23r1<F: FnOnce(F23r1) -> F23r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f23r1_mut(), f(F23r1(0)));
        }
        self
    }

    #[doc="Modify the F23R1 register."]
    #[inline] pub fn with_f23r1<F: FnOnce(F23r1) -> F23r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f23r1_mut(), f(self.f23r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F23R2 register."]
    #[inline] pub fn f23r2_mut(&self) -> *mut F23r2 { 
        (self.0 + 0x2fc) as *mut F23r2
    }

    #[doc="Get the *const pointer for the F23R2 register."]
    #[inline] pub fn f23r2_ptr(&self) -> *const F23r2 { 
           self.f23r2_mut()
    }

    #[doc="Read the F23R2 register."]
    #[inline] pub fn f23r2(&self) -> F23r2 { 
        unsafe {
            read_volatile(self.f23r2_ptr())
        }
    }

    #[doc="Write the F23R2 register."]
    #[inline] pub fn set_f23r2<F: FnOnce(F23r2) -> F23r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f23r2_mut(), f(F23r2(0)));
        }
        self
    }

    #[doc="Modify the F23R2 register."]
    #[inline] pub fn with_f23r2<F: FnOnce(F23r2) -> F23r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f23r2_mut(), f(self.f23r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F24R1 register."]
    #[inline] pub fn f24r1_mut(&self) -> *mut F24r1 { 
        (self.0 + 0x300) as *mut F24r1
    }

    #[doc="Get the *const pointer for the F24R1 register."]
    #[inline] pub fn f24r1_ptr(&self) -> *const F24r1 { 
           self.f24r1_mut()
    }

    #[doc="Read the F24R1 register."]
    #[inline] pub fn f24r1(&self) -> F24r1 { 
        unsafe {
            read_volatile(self.f24r1_ptr())
        }
    }

    #[doc="Write the F24R1 register."]
    #[inline] pub fn set_f24r1<F: FnOnce(F24r1) -> F24r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f24r1_mut(), f(F24r1(0)));
        }
        self
    }

    #[doc="Modify the F24R1 register."]
    #[inline] pub fn with_f24r1<F: FnOnce(F24r1) -> F24r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f24r1_mut(), f(self.f24r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F24R2 register."]
    #[inline] pub fn f24r2_mut(&self) -> *mut F24r2 { 
        (self.0 + 0x304) as *mut F24r2
    }

    #[doc="Get the *const pointer for the F24R2 register."]
    #[inline] pub fn f24r2_ptr(&self) -> *const F24r2 { 
           self.f24r2_mut()
    }

    #[doc="Read the F24R2 register."]
    #[inline] pub fn f24r2(&self) -> F24r2 { 
        unsafe {
            read_volatile(self.f24r2_ptr())
        }
    }

    #[doc="Write the F24R2 register."]
    #[inline] pub fn set_f24r2<F: FnOnce(F24r2) -> F24r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f24r2_mut(), f(F24r2(0)));
        }
        self
    }

    #[doc="Modify the F24R2 register."]
    #[inline] pub fn with_f24r2<F: FnOnce(F24r2) -> F24r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f24r2_mut(), f(self.f24r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F25R1 register."]
    #[inline] pub fn f25r1_mut(&self) -> *mut F25r1 { 
        (self.0 + 0x308) as *mut F25r1
    }

    #[doc="Get the *const pointer for the F25R1 register."]
    #[inline] pub fn f25r1_ptr(&self) -> *const F25r1 { 
           self.f25r1_mut()
    }

    #[doc="Read the F25R1 register."]
    #[inline] pub fn f25r1(&self) -> F25r1 { 
        unsafe {
            read_volatile(self.f25r1_ptr())
        }
    }

    #[doc="Write the F25R1 register."]
    #[inline] pub fn set_f25r1<F: FnOnce(F25r1) -> F25r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f25r1_mut(), f(F25r1(0)));
        }
        self
    }

    #[doc="Modify the F25R1 register."]
    #[inline] pub fn with_f25r1<F: FnOnce(F25r1) -> F25r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f25r1_mut(), f(self.f25r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F25R2 register."]
    #[inline] pub fn f25r2_mut(&self) -> *mut F25r2 { 
        (self.0 + 0x30c) as *mut F25r2
    }

    #[doc="Get the *const pointer for the F25R2 register."]
    #[inline] pub fn f25r2_ptr(&self) -> *const F25r2 { 
           self.f25r2_mut()
    }

    #[doc="Read the F25R2 register."]
    #[inline] pub fn f25r2(&self) -> F25r2 { 
        unsafe {
            read_volatile(self.f25r2_ptr())
        }
    }

    #[doc="Write the F25R2 register."]
    #[inline] pub fn set_f25r2<F: FnOnce(F25r2) -> F25r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f25r2_mut(), f(F25r2(0)));
        }
        self
    }

    #[doc="Modify the F25R2 register."]
    #[inline] pub fn with_f25r2<F: FnOnce(F25r2) -> F25r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f25r2_mut(), f(self.f25r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F26R1 register."]
    #[inline] pub fn f26r1_mut(&self) -> *mut F26r1 { 
        (self.0 + 0x310) as *mut F26r1
    }

    #[doc="Get the *const pointer for the F26R1 register."]
    #[inline] pub fn f26r1_ptr(&self) -> *const F26r1 { 
           self.f26r1_mut()
    }

    #[doc="Read the F26R1 register."]
    #[inline] pub fn f26r1(&self) -> F26r1 { 
        unsafe {
            read_volatile(self.f26r1_ptr())
        }
    }

    #[doc="Write the F26R1 register."]
    #[inline] pub fn set_f26r1<F: FnOnce(F26r1) -> F26r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f26r1_mut(), f(F26r1(0)));
        }
        self
    }

    #[doc="Modify the F26R1 register."]
    #[inline] pub fn with_f26r1<F: FnOnce(F26r1) -> F26r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f26r1_mut(), f(self.f26r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F26R2 register."]
    #[inline] pub fn f26r2_mut(&self) -> *mut F26r2 { 
        (self.0 + 0x314) as *mut F26r2
    }

    #[doc="Get the *const pointer for the F26R2 register."]
    #[inline] pub fn f26r2_ptr(&self) -> *const F26r2 { 
           self.f26r2_mut()
    }

    #[doc="Read the F26R2 register."]
    #[inline] pub fn f26r2(&self) -> F26r2 { 
        unsafe {
            read_volatile(self.f26r2_ptr())
        }
    }

    #[doc="Write the F26R2 register."]
    #[inline] pub fn set_f26r2<F: FnOnce(F26r2) -> F26r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f26r2_mut(), f(F26r2(0)));
        }
        self
    }

    #[doc="Modify the F26R2 register."]
    #[inline] pub fn with_f26r2<F: FnOnce(F26r2) -> F26r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f26r2_mut(), f(self.f26r2()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F27R1 register."]
    #[inline] pub fn f27r1_mut(&self) -> *mut F27r1 { 
        (self.0 + 0x318) as *mut F27r1
    }

    #[doc="Get the *const pointer for the F27R1 register."]
    #[inline] pub fn f27r1_ptr(&self) -> *const F27r1 { 
           self.f27r1_mut()
    }

    #[doc="Read the F27R1 register."]
    #[inline] pub fn f27r1(&self) -> F27r1 { 
        unsafe {
            read_volatile(self.f27r1_ptr())
        }
    }

    #[doc="Write the F27R1 register."]
    #[inline] pub fn set_f27r1<F: FnOnce(F27r1) -> F27r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f27r1_mut(), f(F27r1(0)));
        }
        self
    }

    #[doc="Modify the F27R1 register."]
    #[inline] pub fn with_f27r1<F: FnOnce(F27r1) -> F27r1>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f27r1_mut(), f(self.f27r1()));
        }
        self
    }

    #[doc="Get the *mut pointer for the F27R2 register."]
    #[inline] pub fn f27r2_mut(&self) -> *mut F27r2 { 
        (self.0 + 0x31c) as *mut F27r2
    }

    #[doc="Get the *const pointer for the F27R2 register."]
    #[inline] pub fn f27r2_ptr(&self) -> *const F27r2 { 
           self.f27r2_mut()
    }

    #[doc="Read the F27R2 register."]
    #[inline] pub fn f27r2(&self) -> F27r2 { 
        unsafe {
            read_volatile(self.f27r2_ptr())
        }
    }

    #[doc="Write the F27R2 register."]
    #[inline] pub fn set_f27r2<F: FnOnce(F27r2) -> F27r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f27r2_mut(), f(F27r2(0)));
        }
        self
    }

    #[doc="Modify the F27R2 register."]
    #[inline] pub fn with_f27r2<F: FnOnce(F27r2) -> F27r2>(&self, f: F) -> &Self {
        unsafe {
            write_volatile(self.f27r2_mut(), f(self.f27r2()));
        }
        self
    }

}

#[doc="master control register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Mcr(pub u32);
impl Mcr {
    #[doc="DBF"]
    #[inline] pub fn dbf(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if DBF != 0"]
    #[inline] pub fn test_dbf(&self) -> bool {
        self.dbf() != 0
    }

    #[doc="Sets the DBF field."]
    #[inline] pub fn set_dbf<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="RESET"]
    #[inline] pub fn _reset(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if RESET != 0"]
    #[inline] pub fn test_reset(&self) -> bool {
        self._reset() != 0
    }

    #[doc="Sets the RESET field."]
    #[inline] pub fn set_reset<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="TTCM"]
    #[inline] pub fn ttcm(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if TTCM != 0"]
    #[inline] pub fn test_ttcm(&self) -> bool {
        self.ttcm() != 0
    }

    #[doc="Sets the TTCM field."]
    #[inline] pub fn set_ttcm<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="ABOM"]
    #[inline] pub fn abom(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if ABOM != 0"]
    #[inline] pub fn test_abom(&self) -> bool {
        self.abom() != 0
    }

    #[doc="Sets the ABOM field."]
    #[inline] pub fn set_abom<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="AWUM"]
    #[inline] pub fn awum(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if AWUM != 0"]
    #[inline] pub fn test_awum(&self) -> bool {
        self.awum() != 0
    }

    #[doc="Sets the AWUM field."]
    #[inline] pub fn set_awum<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="NART"]
    #[inline] pub fn nart(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if NART != 0"]
    #[inline] pub fn test_nart(&self) -> bool {
        self.nart() != 0
    }

    #[doc="Sets the NART field."]
    #[inline] pub fn set_nart<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="RFLM"]
    #[inline] pub fn rflm(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if RFLM != 0"]
    #[inline] pub fn test_rflm(&self) -> bool {
        self.rflm() != 0
    }

    #[doc="Sets the RFLM field."]
    #[inline] pub fn set_rflm<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="TXFP"]
    #[inline] pub fn txfp(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if TXFP != 0"]
    #[inline] pub fn test_txfp(&self) -> bool {
        self.txfp() != 0
    }

    #[doc="Sets the TXFP field."]
    #[inline] pub fn set_txfp<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="SLEEP"]
    #[inline] pub fn sleep(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if SLEEP != 0"]
    #[inline] pub fn test_sleep(&self) -> bool {
        self.sleep() != 0
    }

    #[doc="Sets the SLEEP field."]
    #[inline] pub fn set_sleep<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="INRQ"]
    #[inline] pub fn inrq(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if INRQ != 0"]
    #[inline] pub fn test_inrq(&self) -> bool {
        self.inrq() != 0
    }

    #[doc="Sets the INRQ field."]
    #[inline] pub fn set_inrq<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Mcr {
    #[inline]
    fn from(other: u32) -> Self {
         Mcr(other)
    }
}

impl ::core::fmt::Display for Mcr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Mcr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.dbf() != 0 { try!(write!(f, " dbf"))}
        if self._reset() != 0 { try!(write!(f, " _reset"))}
        if self.ttcm() != 0 { try!(write!(f, " ttcm"))}
        if self.abom() != 0 { try!(write!(f, " abom"))}
        if self.awum() != 0 { try!(write!(f, " awum"))}
        if self.nart() != 0 { try!(write!(f, " nart"))}
        if self.rflm() != 0 { try!(write!(f, " rflm"))}
        if self.txfp() != 0 { try!(write!(f, " txfp"))}
        if self.sleep() != 0 { try!(write!(f, " sleep"))}
        if self.inrq() != 0 { try!(write!(f, " inrq"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="master status register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Msr(pub u32);
impl Msr {
    #[doc="RX"]
    #[inline] pub fn rx(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if RX != 0"]
    #[inline] pub fn test_rx(&self) -> bool {
        self.rx() != 0
    }

    #[doc="Sets the RX field."]
    #[inline] pub fn set_rx<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="SAMP"]
    #[inline] pub fn samp(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if SAMP != 0"]
    #[inline] pub fn test_samp(&self) -> bool {
        self.samp() != 0
    }

    #[doc="Sets the SAMP field."]
    #[inline] pub fn set_samp<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="RXM"]
    #[inline] pub fn rxm(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if RXM != 0"]
    #[inline] pub fn test_rxm(&self) -> bool {
        self.rxm() != 0
    }

    #[doc="Sets the RXM field."]
    #[inline] pub fn set_rxm<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="TXM"]
    #[inline] pub fn txm(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if TXM != 0"]
    #[inline] pub fn test_txm(&self) -> bool {
        self.txm() != 0
    }

    #[doc="Sets the TXM field."]
    #[inline] pub fn set_txm<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="SLAKI"]
    #[inline] pub fn slaki(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if SLAKI != 0"]
    #[inline] pub fn test_slaki(&self) -> bool {
        self.slaki() != 0
    }

    #[doc="Sets the SLAKI field."]
    #[inline] pub fn set_slaki<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="WKUI"]
    #[inline] pub fn wkui(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if WKUI != 0"]
    #[inline] pub fn test_wkui(&self) -> bool {
        self.wkui() != 0
    }

    #[doc="Sets the WKUI field."]
    #[inline] pub fn set_wkui<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="ERRI"]
    #[inline] pub fn erri(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if ERRI != 0"]
    #[inline] pub fn test_erri(&self) -> bool {
        self.erri() != 0
    }

    #[doc="Sets the ERRI field."]
    #[inline] pub fn set_erri<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="SLAK"]
    #[inline] pub fn slak(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if SLAK != 0"]
    #[inline] pub fn test_slak(&self) -> bool {
        self.slak() != 0
    }

    #[doc="Sets the SLAK field."]
    #[inline] pub fn set_slak<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="INAK"]
    #[inline] pub fn inak(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if INAK != 0"]
    #[inline] pub fn test_inak(&self) -> bool {
        self.inak() != 0
    }

    #[doc="Sets the INAK field."]
    #[inline] pub fn set_inak<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Msr {
    #[inline]
    fn from(other: u32) -> Self {
         Msr(other)
    }
}

impl ::core::fmt::Display for Msr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Msr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.rx() != 0 { try!(write!(f, " rx"))}
        if self.samp() != 0 { try!(write!(f, " samp"))}
        if self.rxm() != 0 { try!(write!(f, " rxm"))}
        if self.txm() != 0 { try!(write!(f, " txm"))}
        if self.slaki() != 0 { try!(write!(f, " slaki"))}
        if self.wkui() != 0 { try!(write!(f, " wkui"))}
        if self.erri() != 0 { try!(write!(f, " erri"))}
        if self.slak() != 0 { try!(write!(f, " slak"))}
        if self.inak() != 0 { try!(write!(f, " inak"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="transmit status register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Tsr(pub u32);
impl Tsr {
    #[doc="Lowest priority flag for mailbox 2"]
    #[inline] pub fn low2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if LOW2 != 0"]
    #[inline] pub fn test_low2(&self) -> bool {
        self.low2() != 0
    }

    #[doc="Sets the LOW2 field."]
    #[inline] pub fn set_low2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

    #[doc="Lowest priority flag for mailbox 1"]
    #[inline] pub fn low1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if LOW1 != 0"]
    #[inline] pub fn test_low1(&self) -> bool {
        self.low1() != 0
    }

    #[doc="Sets the LOW1 field."]
    #[inline] pub fn set_low1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Lowest priority flag for mailbox 0"]
    #[inline] pub fn low0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if LOW0 != 0"]
    #[inline] pub fn test_low0(&self) -> bool {
        self.low0() != 0
    }

    #[doc="Sets the LOW0 field."]
    #[inline] pub fn set_low0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Lowest priority flag for mailbox 2"]
    #[inline] pub fn tme2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if TME2 != 0"]
    #[inline] pub fn test_tme2(&self) -> bool {
        self.tme2() != 0
    }

    #[doc="Sets the TME2 field."]
    #[inline] pub fn set_tme2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Lowest priority flag for mailbox 1"]
    #[inline] pub fn tme1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if TME1 != 0"]
    #[inline] pub fn test_tme1(&self) -> bool {
        self.tme1() != 0
    }

    #[doc="Sets the TME1 field."]
    #[inline] pub fn set_tme1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Lowest priority flag for mailbox 0"]
    #[inline] pub fn tme0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if TME0 != 0"]
    #[inline] pub fn test_tme0(&self) -> bool {
        self.tme0() != 0
    }

    #[doc="Sets the TME0 field."]
    #[inline] pub fn set_tme0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="CODE"]
    #[inline] pub fn code(&self) -> bits::U2 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x3) as u8) } // [25:24]
    }

    #[doc="Returns true if CODE != 0"]
    #[inline] pub fn test_code(&self) -> bool {
        self.code() != 0
    }

    #[doc="Sets the CODE field."]
    #[inline] pub fn set_code<V: Into<bits::U2>>(mut self, value: V) -> Self {
        let value: bits::U2 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x3 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="ABRQ2"]
    #[inline] pub fn abrq2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if ABRQ2 != 0"]
    #[inline] pub fn test_abrq2(&self) -> bool {
        self.abrq2() != 0
    }

    #[doc="Sets the ABRQ2 field."]
    #[inline] pub fn set_abrq2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="TERR2"]
    #[inline] pub fn terr2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if TERR2 != 0"]
    #[inline] pub fn test_terr2(&self) -> bool {
        self.terr2() != 0
    }

    #[doc="Sets the TERR2 field."]
    #[inline] pub fn set_terr2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="ALST2"]
    #[inline] pub fn alst2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if ALST2 != 0"]
    #[inline] pub fn test_alst2(&self) -> bool {
        self.alst2() != 0
    }

    #[doc="Sets the ALST2 field."]
    #[inline] pub fn set_alst2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="TXOK2"]
    #[inline] pub fn txok2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if TXOK2 != 0"]
    #[inline] pub fn test_txok2(&self) -> bool {
        self.txok2() != 0
    }

    #[doc="Sets the TXOK2 field."]
    #[inline] pub fn set_txok2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="RQCP2"]
    #[inline] pub fn rqcp2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if RQCP2 != 0"]
    #[inline] pub fn test_rqcp2(&self) -> bool {
        self.rqcp2() != 0
    }

    #[doc="Sets the RQCP2 field."]
    #[inline] pub fn set_rqcp2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="ABRQ1"]
    #[inline] pub fn abrq1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if ABRQ1 != 0"]
    #[inline] pub fn test_abrq1(&self) -> bool {
        self.abrq1() != 0
    }

    #[doc="Sets the ABRQ1 field."]
    #[inline] pub fn set_abrq1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="TERR1"]
    #[inline] pub fn terr1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if TERR1 != 0"]
    #[inline] pub fn test_terr1(&self) -> bool {
        self.terr1() != 0
    }

    #[doc="Sets the TERR1 field."]
    #[inline] pub fn set_terr1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="ALST1"]
    #[inline] pub fn alst1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if ALST1 != 0"]
    #[inline] pub fn test_alst1(&self) -> bool {
        self.alst1() != 0
    }

    #[doc="Sets the ALST1 field."]
    #[inline] pub fn set_alst1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="TXOK1"]
    #[inline] pub fn txok1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if TXOK1 != 0"]
    #[inline] pub fn test_txok1(&self) -> bool {
        self.txok1() != 0
    }

    #[doc="Sets the TXOK1 field."]
    #[inline] pub fn set_txok1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="RQCP1"]
    #[inline] pub fn rqcp1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if RQCP1 != 0"]
    #[inline] pub fn test_rqcp1(&self) -> bool {
        self.rqcp1() != 0
    }

    #[doc="Sets the RQCP1 field."]
    #[inline] pub fn set_rqcp1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="ABRQ0"]
    #[inline] pub fn abrq0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if ABRQ0 != 0"]
    #[inline] pub fn test_abrq0(&self) -> bool {
        self.abrq0() != 0
    }

    #[doc="Sets the ABRQ0 field."]
    #[inline] pub fn set_abrq0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="TERR0"]
    #[inline] pub fn terr0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if TERR0 != 0"]
    #[inline] pub fn test_terr0(&self) -> bool {
        self.terr0() != 0
    }

    #[doc="Sets the TERR0 field."]
    #[inline] pub fn set_terr0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="ALST0"]
    #[inline] pub fn alst0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if ALST0 != 0"]
    #[inline] pub fn test_alst0(&self) -> bool {
        self.alst0() != 0
    }

    #[doc="Sets the ALST0 field."]
    #[inline] pub fn set_alst0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="TXOK0"]
    #[inline] pub fn txok0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if TXOK0 != 0"]
    #[inline] pub fn test_txok0(&self) -> bool {
        self.txok0() != 0
    }

    #[doc="Sets the TXOK0 field."]
    #[inline] pub fn set_txok0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="RQCP0"]
    #[inline] pub fn rqcp0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if RQCP0 != 0"]
    #[inline] pub fn test_rqcp0(&self) -> bool {
        self.rqcp0() != 0
    }

    #[doc="Sets the RQCP0 field."]
    #[inline] pub fn set_rqcp0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Tsr {
    #[inline]
    fn from(other: u32) -> Self {
         Tsr(other)
    }
}

impl ::core::fmt::Display for Tsr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Tsr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.low2() != 0 { try!(write!(f, " low2"))}
        if self.low1() != 0 { try!(write!(f, " low1"))}
        if self.low0() != 0 { try!(write!(f, " low0"))}
        if self.tme2() != 0 { try!(write!(f, " tme2"))}
        if self.tme1() != 0 { try!(write!(f, " tme1"))}
        if self.tme0() != 0 { try!(write!(f, " tme0"))}
        if self.code() != 0 { try!(write!(f, " code=0x{:x}", self.code()))}
        if self.abrq2() != 0 { try!(write!(f, " abrq2"))}
        if self.terr2() != 0 { try!(write!(f, " terr2"))}
        if self.alst2() != 0 { try!(write!(f, " alst2"))}
        if self.txok2() != 0 { try!(write!(f, " txok2"))}
        if self.rqcp2() != 0 { try!(write!(f, " rqcp2"))}
        if self.abrq1() != 0 { try!(write!(f, " abrq1"))}
        if self.terr1() != 0 { try!(write!(f, " terr1"))}
        if self.alst1() != 0 { try!(write!(f, " alst1"))}
        if self.txok1() != 0 { try!(write!(f, " txok1"))}
        if self.rqcp1() != 0 { try!(write!(f, " rqcp1"))}
        if self.abrq0() != 0 { try!(write!(f, " abrq0"))}
        if self.terr0() != 0 { try!(write!(f, " terr0"))}
        if self.alst0() != 0 { try!(write!(f, " alst0"))}
        if self.txok0() != 0 { try!(write!(f, " txok0"))}
        if self.rqcp0() != 0 { try!(write!(f, " rqcp0"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="receive FIFO 0 register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Rf0r(pub u32);
impl Rf0r {
    #[doc="RFOM0"]
    #[inline] pub fn rfom0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if RFOM0 != 0"]
    #[inline] pub fn test_rfom0(&self) -> bool {
        self.rfom0() != 0
    }

    #[doc="Sets the RFOM0 field."]
    #[inline] pub fn set_rfom0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="FOVR0"]
    #[inline] pub fn fovr0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FOVR0 != 0"]
    #[inline] pub fn test_fovr0(&self) -> bool {
        self.fovr0() != 0
    }

    #[doc="Sets the FOVR0 field."]
    #[inline] pub fn set_fovr0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="FULL0"]
    #[inline] pub fn full0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FULL0 != 0"]
    #[inline] pub fn test_full0(&self) -> bool {
        self.full0() != 0
    }

    #[doc="Sets the FULL0 field."]
    #[inline] pub fn set_full0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="FMP0"]
    #[inline] pub fn fmp0(&self) -> bits::U2 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x3) as u8) } // [1:0]
    }

    #[doc="Returns true if FMP0 != 0"]
    #[inline] pub fn test_fmp0(&self) -> bool {
        self.fmp0() != 0
    }

    #[doc="Sets the FMP0 field."]
    #[inline] pub fn set_fmp0<V: Into<bits::U2>>(mut self, value: V) -> Self {
        let value: bits::U2 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x3 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Rf0r {
    #[inline]
    fn from(other: u32) -> Self {
         Rf0r(other)
    }
}

impl ::core::fmt::Display for Rf0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Rf0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.rfom0() != 0 { try!(write!(f, " rfom0"))}
        if self.fovr0() != 0 { try!(write!(f, " fovr0"))}
        if self.full0() != 0 { try!(write!(f, " full0"))}
        if self.fmp0() != 0 { try!(write!(f, " fmp0=0x{:x}", self.fmp0()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="receive FIFO 1 register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Rf1r(pub u32);
impl Rf1r {
    #[doc="RFOM1"]
    #[inline] pub fn rfom1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if RFOM1 != 0"]
    #[inline] pub fn test_rfom1(&self) -> bool {
        self.rfom1() != 0
    }

    #[doc="Sets the RFOM1 field."]
    #[inline] pub fn set_rfom1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="FOVR1"]
    #[inline] pub fn fovr1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FOVR1 != 0"]
    #[inline] pub fn test_fovr1(&self) -> bool {
        self.fovr1() != 0
    }

    #[doc="Sets the FOVR1 field."]
    #[inline] pub fn set_fovr1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="FULL1"]
    #[inline] pub fn full1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FULL1 != 0"]
    #[inline] pub fn test_full1(&self) -> bool {
        self.full1() != 0
    }

    #[doc="Sets the FULL1 field."]
    #[inline] pub fn set_full1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="FMP1"]
    #[inline] pub fn fmp1(&self) -> bits::U2 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x3) as u8) } // [1:0]
    }

    #[doc="Returns true if FMP1 != 0"]
    #[inline] pub fn test_fmp1(&self) -> bool {
        self.fmp1() != 0
    }

    #[doc="Sets the FMP1 field."]
    #[inline] pub fn set_fmp1<V: Into<bits::U2>>(mut self, value: V) -> Self {
        let value: bits::U2 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x3 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Rf1r {
    #[inline]
    fn from(other: u32) -> Self {
         Rf1r(other)
    }
}

impl ::core::fmt::Display for Rf1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Rf1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.rfom1() != 0 { try!(write!(f, " rfom1"))}
        if self.fovr1() != 0 { try!(write!(f, " fovr1"))}
        if self.full1() != 0 { try!(write!(f, " full1"))}
        if self.fmp1() != 0 { try!(write!(f, " fmp1=0x{:x}", self.fmp1()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="interrupt enable register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Ier(pub u32);
impl Ier {
    #[doc="SLKIE"]
    #[inline] pub fn slkie(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if SLKIE != 0"]
    #[inline] pub fn test_slkie(&self) -> bool {
        self.slkie() != 0
    }

    #[doc="Sets the SLKIE field."]
    #[inline] pub fn set_slkie<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="WKUIE"]
    #[inline] pub fn wkuie(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if WKUIE != 0"]
    #[inline] pub fn test_wkuie(&self) -> bool {
        self.wkuie() != 0
    }

    #[doc="Sets the WKUIE field."]
    #[inline] pub fn set_wkuie<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="ERRIE"]
    #[inline] pub fn errie(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if ERRIE != 0"]
    #[inline] pub fn test_errie(&self) -> bool {
        self.errie() != 0
    }

    #[doc="Sets the ERRIE field."]
    #[inline] pub fn set_errie<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="LECIE"]
    #[inline] pub fn lecie(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if LECIE != 0"]
    #[inline] pub fn test_lecie(&self) -> bool {
        self.lecie() != 0
    }

    #[doc="Sets the LECIE field."]
    #[inline] pub fn set_lecie<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="BOFIE"]
    #[inline] pub fn bofie(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if BOFIE != 0"]
    #[inline] pub fn test_bofie(&self) -> bool {
        self.bofie() != 0
    }

    #[doc="Sets the BOFIE field."]
    #[inline] pub fn set_bofie<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="EPVIE"]
    #[inline] pub fn epvie(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if EPVIE != 0"]
    #[inline] pub fn test_epvie(&self) -> bool {
        self.epvie() != 0
    }

    #[doc="Sets the EPVIE field."]
    #[inline] pub fn set_epvie<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="EWGIE"]
    #[inline] pub fn ewgie(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if EWGIE != 0"]
    #[inline] pub fn test_ewgie(&self) -> bool {
        self.ewgie() != 0
    }

    #[doc="Sets the EWGIE field."]
    #[inline] pub fn set_ewgie<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="FOVIE1"]
    #[inline] pub fn fovie1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FOVIE1 != 0"]
    #[inline] pub fn test_fovie1(&self) -> bool {
        self.fovie1() != 0
    }

    #[doc="Sets the FOVIE1 field."]
    #[inline] pub fn set_fovie1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="FFIE1"]
    #[inline] pub fn ffie1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FFIE1 != 0"]
    #[inline] pub fn test_ffie1(&self) -> bool {
        self.ffie1() != 0
    }

    #[doc="Sets the FFIE1 field."]
    #[inline] pub fn set_ffie1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="FMPIE1"]
    #[inline] pub fn fmpie1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FMPIE1 != 0"]
    #[inline] pub fn test_fmpie1(&self) -> bool {
        self.fmpie1() != 0
    }

    #[doc="Sets the FMPIE1 field."]
    #[inline] pub fn set_fmpie1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="FOVIE0"]
    #[inline] pub fn fovie0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FOVIE0 != 0"]
    #[inline] pub fn test_fovie0(&self) -> bool {
        self.fovie0() != 0
    }

    #[doc="Sets the FOVIE0 field."]
    #[inline] pub fn set_fovie0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="FFIE0"]
    #[inline] pub fn ffie0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FFIE0 != 0"]
    #[inline] pub fn test_ffie0(&self) -> bool {
        self.ffie0() != 0
    }

    #[doc="Sets the FFIE0 field."]
    #[inline] pub fn set_ffie0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="FMPIE0"]
    #[inline] pub fn fmpie0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FMPIE0 != 0"]
    #[inline] pub fn test_fmpie0(&self) -> bool {
        self.fmpie0() != 0
    }

    #[doc="Sets the FMPIE0 field."]
    #[inline] pub fn set_fmpie0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="TMEIE"]
    #[inline] pub fn tmeie(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if TMEIE != 0"]
    #[inline] pub fn test_tmeie(&self) -> bool {
        self.tmeie() != 0
    }

    #[doc="Sets the TMEIE field."]
    #[inline] pub fn set_tmeie<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Ier {
    #[inline]
    fn from(other: u32) -> Self {
         Ier(other)
    }
}

impl ::core::fmt::Display for Ier {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Ier {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.slkie() != 0 { try!(write!(f, " slkie"))}
        if self.wkuie() != 0 { try!(write!(f, " wkuie"))}
        if self.errie() != 0 { try!(write!(f, " errie"))}
        if self.lecie() != 0 { try!(write!(f, " lecie"))}
        if self.bofie() != 0 { try!(write!(f, " bofie"))}
        if self.epvie() != 0 { try!(write!(f, " epvie"))}
        if self.ewgie() != 0 { try!(write!(f, " ewgie"))}
        if self.fovie1() != 0 { try!(write!(f, " fovie1"))}
        if self.ffie1() != 0 { try!(write!(f, " ffie1"))}
        if self.fmpie1() != 0 { try!(write!(f, " fmpie1"))}
        if self.fovie0() != 0 { try!(write!(f, " fovie0"))}
        if self.ffie0() != 0 { try!(write!(f, " ffie0"))}
        if self.fmpie0() != 0 { try!(write!(f, " fmpie0"))}
        if self.tmeie() != 0 { try!(write!(f, " tmeie"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="interrupt enable register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Esr(pub u32);
impl Esr {
    #[doc="REC"]
    #[inline] pub fn rec(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if REC != 0"]
    #[inline] pub fn test_rec(&self) -> bool {
        self.rec() != 0
    }

    #[doc="Sets the REC field."]
    #[inline] pub fn set_rec<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="TEC"]
    #[inline] pub fn tec(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if TEC != 0"]
    #[inline] pub fn test_tec(&self) -> bool {
        self.tec() != 0
    }

    #[doc="Sets the TEC field."]
    #[inline] pub fn set_tec<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="LEC"]
    #[inline] pub fn lec(&self) -> bits::U3 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x7) as u8) } // [6:4]
    }

    #[doc="Returns true if LEC != 0"]
    #[inline] pub fn test_lec(&self) -> bool {
        self.lec() != 0
    }

    #[doc="Sets the LEC field."]
    #[inline] pub fn set_lec<V: Into<bits::U3>>(mut self, value: V) -> Self {
        let value: bits::U3 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x7 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="BOFF"]
    #[inline] pub fn boff(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if BOFF != 0"]
    #[inline] pub fn test_boff(&self) -> bool {
        self.boff() != 0
    }

    #[doc="Sets the BOFF field."]
    #[inline] pub fn set_boff<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="EPVF"]
    #[inline] pub fn epvf(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if EPVF != 0"]
    #[inline] pub fn test_epvf(&self) -> bool {
        self.epvf() != 0
    }

    #[doc="Sets the EPVF field."]
    #[inline] pub fn set_epvf<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="EWGF"]
    #[inline] pub fn ewgf(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if EWGF != 0"]
    #[inline] pub fn test_ewgf(&self) -> bool {
        self.ewgf() != 0
    }

    #[doc="Sets the EWGF field."]
    #[inline] pub fn set_ewgf<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Esr {
    #[inline]
    fn from(other: u32) -> Self {
         Esr(other)
    }
}

impl ::core::fmt::Display for Esr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Esr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.rec() != 0 { try!(write!(f, " rec=0x{:x}", self.rec()))}
        if self.tec() != 0 { try!(write!(f, " tec=0x{:x}", self.tec()))}
        if self.lec() != 0 { try!(write!(f, " lec=0x{:x}", self.lec()))}
        if self.boff() != 0 { try!(write!(f, " boff"))}
        if self.epvf() != 0 { try!(write!(f, " epvf"))}
        if self.ewgf() != 0 { try!(write!(f, " ewgf"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="bit timing register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Btr(pub u32);
impl Btr {
    #[doc="SILM"]
    #[inline] pub fn silm(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if SILM != 0"]
    #[inline] pub fn test_silm(&self) -> bool {
        self.silm() != 0
    }

    #[doc="Sets the SILM field."]
    #[inline] pub fn set_silm<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

    #[doc="LBKM"]
    #[inline] pub fn lbkm(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if LBKM != 0"]
    #[inline] pub fn test_lbkm(&self) -> bool {
        self.lbkm() != 0
    }

    #[doc="Sets the LBKM field."]
    #[inline] pub fn set_lbkm<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="SJW"]
    #[inline] pub fn sjw(&self) -> bits::U2 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x3) as u8) } // [25:24]
    }

    #[doc="Returns true if SJW != 0"]
    #[inline] pub fn test_sjw(&self) -> bool {
        self.sjw() != 0
    }

    #[doc="Sets the SJW field."]
    #[inline] pub fn set_sjw<V: Into<bits::U2>>(mut self, value: V) -> Self {
        let value: bits::U2 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x3 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="TS2"]
    #[inline] pub fn ts2(&self) -> bits::U3 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x7) as u8) } // [22:20]
    }

    #[doc="Returns true if TS2 != 0"]
    #[inline] pub fn test_ts2(&self) -> bool {
        self.ts2() != 0
    }

    #[doc="Sets the TS2 field."]
    #[inline] pub fn set_ts2<V: Into<bits::U3>>(mut self, value: V) -> Self {
        let value: bits::U3 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x7 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="TS1"]
    #[inline] pub fn ts1(&self) -> bits::U4 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xf) as u8) } // [19:16]
    }

    #[doc="Returns true if TS1 != 0"]
    #[inline] pub fn test_ts1(&self) -> bool {
        self.ts1() != 0
    }

    #[doc="Sets the TS1 field."]
    #[inline] pub fn set_ts1<V: Into<bits::U4>>(mut self, value: V) -> Self {
        let value: bits::U4 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xf << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="BRP"]
    #[inline] pub fn brp(&self) -> bits::U10 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x3ff) as u16) } // [9:0]
    }

    #[doc="Returns true if BRP != 0"]
    #[inline] pub fn test_brp(&self) -> bool {
        self.brp() != 0
    }

    #[doc="Sets the BRP field."]
    #[inline] pub fn set_brp<V: Into<bits::U10>>(mut self, value: V) -> Self {
        let value: bits::U10 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x3ff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Btr {
    #[inline]
    fn from(other: u32) -> Self {
         Btr(other)
    }
}

impl ::core::fmt::Display for Btr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Btr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.silm() != 0 { try!(write!(f, " silm"))}
        if self.lbkm() != 0 { try!(write!(f, " lbkm"))}
        if self.sjw() != 0 { try!(write!(f, " sjw=0x{:x}", self.sjw()))}
        if self.ts2() != 0 { try!(write!(f, " ts2=0x{:x}", self.ts2()))}
        if self.ts1() != 0 { try!(write!(f, " ts1=0x{:x}", self.ts1()))}
        if self.brp() != 0 { try!(write!(f, " brp=0x{:x}", self.brp()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="TX mailbox identifier register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Ti0r(pub u32);
impl Ti0r {
    #[doc="STID"]
    #[inline] pub fn stid(&self) -> bits::U11 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x7ff) as u16) } // [31:21]
    }

    #[doc="Returns true if STID != 0"]
    #[inline] pub fn test_stid(&self) -> bool {
        self.stid() != 0
    }

    #[doc="Sets the STID field."]
    #[inline] pub fn set_stid<V: Into<bits::U11>>(mut self, value: V) -> Self {
        let value: bits::U11 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x7ff << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="EXID"]
    #[inline] pub fn exid(&self) -> bits::U18 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x3ffff) as u32) } // [20:3]
    }

    #[doc="Returns true if EXID != 0"]
    #[inline] pub fn test_exid(&self) -> bool {
        self.exid() != 0
    }

    #[doc="Sets the EXID field."]
    #[inline] pub fn set_exid<V: Into<bits::U18>>(mut self, value: V) -> Self {
        let value: bits::U18 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x3ffff << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="IDE"]
    #[inline] pub fn ide(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if IDE != 0"]
    #[inline] pub fn test_ide(&self) -> bool {
        self.ide() != 0
    }

    #[doc="Sets the IDE field."]
    #[inline] pub fn set_ide<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="RTR"]
    #[inline] pub fn rtr(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if RTR != 0"]
    #[inline] pub fn test_rtr(&self) -> bool {
        self.rtr() != 0
    }

    #[doc="Sets the RTR field."]
    #[inline] pub fn set_rtr<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="TXRQ"]
    #[inline] pub fn txrq(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if TXRQ != 0"]
    #[inline] pub fn test_txrq(&self) -> bool {
        self.txrq() != 0
    }

    #[doc="Sets the TXRQ field."]
    #[inline] pub fn set_txrq<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Ti0r {
    #[inline]
    fn from(other: u32) -> Self {
         Ti0r(other)
    }
}

impl ::core::fmt::Display for Ti0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Ti0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.stid() != 0 { try!(write!(f, " stid=0x{:x}", self.stid()))}
        if self.exid() != 0 { try!(write!(f, " exid=0x{:x}", self.exid()))}
        if self.ide() != 0 { try!(write!(f, " ide"))}
        if self.rtr() != 0 { try!(write!(f, " rtr"))}
        if self.txrq() != 0 { try!(write!(f, " txrq"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data length control and time stamp register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Tdt0r(pub u32);
impl Tdt0r {
    #[doc="TIME"]
    #[inline] pub fn time(&self) -> bits::U16 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xffff) as u16) } // [31:16]
    }

    #[doc="Returns true if TIME != 0"]
    #[inline] pub fn test_time(&self) -> bool {
        self.time() != 0
    }

    #[doc="Sets the TIME field."]
    #[inline] pub fn set_time<V: Into<bits::U16>>(mut self, value: V) -> Self {
        let value: bits::U16 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xffff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="TGT"]
    #[inline] pub fn tgt(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if TGT != 0"]
    #[inline] pub fn test_tgt(&self) -> bool {
        self.tgt() != 0
    }

    #[doc="Sets the TGT field."]
    #[inline] pub fn set_tgt<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DLC"]
    #[inline] pub fn dlc(&self) -> bits::U4 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xf) as u8) } // [3:0]
    }

    #[doc="Returns true if DLC != 0"]
    #[inline] pub fn test_dlc(&self) -> bool {
        self.dlc() != 0
    }

    #[doc="Sets the DLC field."]
    #[inline] pub fn set_dlc<V: Into<bits::U4>>(mut self, value: V) -> Self {
        let value: bits::U4 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xf << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Tdt0r {
    #[inline]
    fn from(other: u32) -> Self {
         Tdt0r(other)
    }
}

impl ::core::fmt::Display for Tdt0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Tdt0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.time() != 0 { try!(write!(f, " time=0x{:x}", self.time()))}
        if self.tgt() != 0 { try!(write!(f, " tgt"))}
        if self.dlc() != 0 { try!(write!(f, " dlc=0x{:x}", self.dlc()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data low register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Tdl0r(pub u32);
impl Tdl0r {
    #[doc="DATA3"]
    #[inline] pub fn data3(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if DATA3 != 0"]
    #[inline] pub fn test_data3(&self) -> bool {
        self.data3() != 0
    }

    #[doc="Sets the DATA3 field."]
    #[inline] pub fn set_data3<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="DATA2"]
    #[inline] pub fn data2(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if DATA2 != 0"]
    #[inline] pub fn test_data2(&self) -> bool {
        self.data2() != 0
    }

    #[doc="Sets the DATA2 field."]
    #[inline] pub fn set_data2<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="DATA1"]
    #[inline] pub fn data1(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if DATA1 != 0"]
    #[inline] pub fn test_data1(&self) -> bool {
        self.data1() != 0
    }

    #[doc="Sets the DATA1 field."]
    #[inline] pub fn set_data1<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DATA0"]
    #[inline] pub fn data0(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xff) as u8) } // [7:0]
    }

    #[doc="Returns true if DATA0 != 0"]
    #[inline] pub fn test_data0(&self) -> bool {
        self.data0() != 0
    }

    #[doc="Sets the DATA0 field."]
    #[inline] pub fn set_data0<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Tdl0r {
    #[inline]
    fn from(other: u32) -> Self {
         Tdl0r(other)
    }
}

impl ::core::fmt::Display for Tdl0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Tdl0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.data3() != 0 { try!(write!(f, " data3=0x{:x}", self.data3()))}
        if self.data2() != 0 { try!(write!(f, " data2=0x{:x}", self.data2()))}
        if self.data1() != 0 { try!(write!(f, " data1=0x{:x}", self.data1()))}
        if self.data0() != 0 { try!(write!(f, " data0=0x{:x}", self.data0()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data high register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Tdh0r(pub u32);
impl Tdh0r {
    #[doc="DATA7"]
    #[inline] pub fn data7(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if DATA7 != 0"]
    #[inline] pub fn test_data7(&self) -> bool {
        self.data7() != 0
    }

    #[doc="Sets the DATA7 field."]
    #[inline] pub fn set_data7<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="DATA6"]
    #[inline] pub fn data6(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if DATA6 != 0"]
    #[inline] pub fn test_data6(&self) -> bool {
        self.data6() != 0
    }

    #[doc="Sets the DATA6 field."]
    #[inline] pub fn set_data6<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="DATA5"]
    #[inline] pub fn data5(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if DATA5 != 0"]
    #[inline] pub fn test_data5(&self) -> bool {
        self.data5() != 0
    }

    #[doc="Sets the DATA5 field."]
    #[inline] pub fn set_data5<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DATA4"]
    #[inline] pub fn data4(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xff) as u8) } // [7:0]
    }

    #[doc="Returns true if DATA4 != 0"]
    #[inline] pub fn test_data4(&self) -> bool {
        self.data4() != 0
    }

    #[doc="Sets the DATA4 field."]
    #[inline] pub fn set_data4<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Tdh0r {
    #[inline]
    fn from(other: u32) -> Self {
         Tdh0r(other)
    }
}

impl ::core::fmt::Display for Tdh0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Tdh0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.data7() != 0 { try!(write!(f, " data7=0x{:x}", self.data7()))}
        if self.data6() != 0 { try!(write!(f, " data6=0x{:x}", self.data6()))}
        if self.data5() != 0 { try!(write!(f, " data5=0x{:x}", self.data5()))}
        if self.data4() != 0 { try!(write!(f, " data4=0x{:x}", self.data4()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox identifier register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Ti1r(pub u32);
impl Ti1r {
    #[doc="STID"]
    #[inline] pub fn stid(&self) -> bits::U11 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x7ff) as u16) } // [31:21]
    }

    #[doc="Returns true if STID != 0"]
    #[inline] pub fn test_stid(&self) -> bool {
        self.stid() != 0
    }

    #[doc="Sets the STID field."]
    #[inline] pub fn set_stid<V: Into<bits::U11>>(mut self, value: V) -> Self {
        let value: bits::U11 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x7ff << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="EXID"]
    #[inline] pub fn exid(&self) -> bits::U18 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x3ffff) as u32) } // [20:3]
    }

    #[doc="Returns true if EXID != 0"]
    #[inline] pub fn test_exid(&self) -> bool {
        self.exid() != 0
    }

    #[doc="Sets the EXID field."]
    #[inline] pub fn set_exid<V: Into<bits::U18>>(mut self, value: V) -> Self {
        let value: bits::U18 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x3ffff << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="IDE"]
    #[inline] pub fn ide(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if IDE != 0"]
    #[inline] pub fn test_ide(&self) -> bool {
        self.ide() != 0
    }

    #[doc="Sets the IDE field."]
    #[inline] pub fn set_ide<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="RTR"]
    #[inline] pub fn rtr(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if RTR != 0"]
    #[inline] pub fn test_rtr(&self) -> bool {
        self.rtr() != 0
    }

    #[doc="Sets the RTR field."]
    #[inline] pub fn set_rtr<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="TXRQ"]
    #[inline] pub fn txrq(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if TXRQ != 0"]
    #[inline] pub fn test_txrq(&self) -> bool {
        self.txrq() != 0
    }

    #[doc="Sets the TXRQ field."]
    #[inline] pub fn set_txrq<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Ti1r {
    #[inline]
    fn from(other: u32) -> Self {
         Ti1r(other)
    }
}

impl ::core::fmt::Display for Ti1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Ti1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.stid() != 0 { try!(write!(f, " stid=0x{:x}", self.stid()))}
        if self.exid() != 0 { try!(write!(f, " exid=0x{:x}", self.exid()))}
        if self.ide() != 0 { try!(write!(f, " ide"))}
        if self.rtr() != 0 { try!(write!(f, " rtr"))}
        if self.txrq() != 0 { try!(write!(f, " txrq"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data length control and time stamp register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Tdt1r(pub u32);
impl Tdt1r {
    #[doc="TIME"]
    #[inline] pub fn time(&self) -> bits::U16 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xffff) as u16) } // [31:16]
    }

    #[doc="Returns true if TIME != 0"]
    #[inline] pub fn test_time(&self) -> bool {
        self.time() != 0
    }

    #[doc="Sets the TIME field."]
    #[inline] pub fn set_time<V: Into<bits::U16>>(mut self, value: V) -> Self {
        let value: bits::U16 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xffff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="TGT"]
    #[inline] pub fn tgt(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if TGT != 0"]
    #[inline] pub fn test_tgt(&self) -> bool {
        self.tgt() != 0
    }

    #[doc="Sets the TGT field."]
    #[inline] pub fn set_tgt<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DLC"]
    #[inline] pub fn dlc(&self) -> bits::U4 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xf) as u8) } // [3:0]
    }

    #[doc="Returns true if DLC != 0"]
    #[inline] pub fn test_dlc(&self) -> bool {
        self.dlc() != 0
    }

    #[doc="Sets the DLC field."]
    #[inline] pub fn set_dlc<V: Into<bits::U4>>(mut self, value: V) -> Self {
        let value: bits::U4 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xf << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Tdt1r {
    #[inline]
    fn from(other: u32) -> Self {
         Tdt1r(other)
    }
}

impl ::core::fmt::Display for Tdt1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Tdt1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.time() != 0 { try!(write!(f, " time=0x{:x}", self.time()))}
        if self.tgt() != 0 { try!(write!(f, " tgt"))}
        if self.dlc() != 0 { try!(write!(f, " dlc=0x{:x}", self.dlc()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data low register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Tdl1r(pub u32);
impl Tdl1r {
    #[doc="DATA3"]
    #[inline] pub fn data3(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if DATA3 != 0"]
    #[inline] pub fn test_data3(&self) -> bool {
        self.data3() != 0
    }

    #[doc="Sets the DATA3 field."]
    #[inline] pub fn set_data3<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="DATA2"]
    #[inline] pub fn data2(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if DATA2 != 0"]
    #[inline] pub fn test_data2(&self) -> bool {
        self.data2() != 0
    }

    #[doc="Sets the DATA2 field."]
    #[inline] pub fn set_data2<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="DATA1"]
    #[inline] pub fn data1(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if DATA1 != 0"]
    #[inline] pub fn test_data1(&self) -> bool {
        self.data1() != 0
    }

    #[doc="Sets the DATA1 field."]
    #[inline] pub fn set_data1<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DATA0"]
    #[inline] pub fn data0(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xff) as u8) } // [7:0]
    }

    #[doc="Returns true if DATA0 != 0"]
    #[inline] pub fn test_data0(&self) -> bool {
        self.data0() != 0
    }

    #[doc="Sets the DATA0 field."]
    #[inline] pub fn set_data0<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Tdl1r {
    #[inline]
    fn from(other: u32) -> Self {
         Tdl1r(other)
    }
}

impl ::core::fmt::Display for Tdl1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Tdl1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.data3() != 0 { try!(write!(f, " data3=0x{:x}", self.data3()))}
        if self.data2() != 0 { try!(write!(f, " data2=0x{:x}", self.data2()))}
        if self.data1() != 0 { try!(write!(f, " data1=0x{:x}", self.data1()))}
        if self.data0() != 0 { try!(write!(f, " data0=0x{:x}", self.data0()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data high register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Tdh1r(pub u32);
impl Tdh1r {
    #[doc="DATA7"]
    #[inline] pub fn data7(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if DATA7 != 0"]
    #[inline] pub fn test_data7(&self) -> bool {
        self.data7() != 0
    }

    #[doc="Sets the DATA7 field."]
    #[inline] pub fn set_data7<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="DATA6"]
    #[inline] pub fn data6(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if DATA6 != 0"]
    #[inline] pub fn test_data6(&self) -> bool {
        self.data6() != 0
    }

    #[doc="Sets the DATA6 field."]
    #[inline] pub fn set_data6<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="DATA5"]
    #[inline] pub fn data5(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if DATA5 != 0"]
    #[inline] pub fn test_data5(&self) -> bool {
        self.data5() != 0
    }

    #[doc="Sets the DATA5 field."]
    #[inline] pub fn set_data5<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DATA4"]
    #[inline] pub fn data4(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xff) as u8) } // [7:0]
    }

    #[doc="Returns true if DATA4 != 0"]
    #[inline] pub fn test_data4(&self) -> bool {
        self.data4() != 0
    }

    #[doc="Sets the DATA4 field."]
    #[inline] pub fn set_data4<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Tdh1r {
    #[inline]
    fn from(other: u32) -> Self {
         Tdh1r(other)
    }
}

impl ::core::fmt::Display for Tdh1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Tdh1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.data7() != 0 { try!(write!(f, " data7=0x{:x}", self.data7()))}
        if self.data6() != 0 { try!(write!(f, " data6=0x{:x}", self.data6()))}
        if self.data5() != 0 { try!(write!(f, " data5=0x{:x}", self.data5()))}
        if self.data4() != 0 { try!(write!(f, " data4=0x{:x}", self.data4()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox identifier register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Ti2r(pub u32);
impl Ti2r {
    #[doc="STID"]
    #[inline] pub fn stid(&self) -> bits::U11 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x7ff) as u16) } // [31:21]
    }

    #[doc="Returns true if STID != 0"]
    #[inline] pub fn test_stid(&self) -> bool {
        self.stid() != 0
    }

    #[doc="Sets the STID field."]
    #[inline] pub fn set_stid<V: Into<bits::U11>>(mut self, value: V) -> Self {
        let value: bits::U11 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x7ff << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="EXID"]
    #[inline] pub fn exid(&self) -> bits::U18 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x3ffff) as u32) } // [20:3]
    }

    #[doc="Returns true if EXID != 0"]
    #[inline] pub fn test_exid(&self) -> bool {
        self.exid() != 0
    }

    #[doc="Sets the EXID field."]
    #[inline] pub fn set_exid<V: Into<bits::U18>>(mut self, value: V) -> Self {
        let value: bits::U18 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x3ffff << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="IDE"]
    #[inline] pub fn ide(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if IDE != 0"]
    #[inline] pub fn test_ide(&self) -> bool {
        self.ide() != 0
    }

    #[doc="Sets the IDE field."]
    #[inline] pub fn set_ide<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="RTR"]
    #[inline] pub fn rtr(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if RTR != 0"]
    #[inline] pub fn test_rtr(&self) -> bool {
        self.rtr() != 0
    }

    #[doc="Sets the RTR field."]
    #[inline] pub fn set_rtr<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="TXRQ"]
    #[inline] pub fn txrq(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if TXRQ != 0"]
    #[inline] pub fn test_txrq(&self) -> bool {
        self.txrq() != 0
    }

    #[doc="Sets the TXRQ field."]
    #[inline] pub fn set_txrq<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Ti2r {
    #[inline]
    fn from(other: u32) -> Self {
         Ti2r(other)
    }
}

impl ::core::fmt::Display for Ti2r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Ti2r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.stid() != 0 { try!(write!(f, " stid=0x{:x}", self.stid()))}
        if self.exid() != 0 { try!(write!(f, " exid=0x{:x}", self.exid()))}
        if self.ide() != 0 { try!(write!(f, " ide"))}
        if self.rtr() != 0 { try!(write!(f, " rtr"))}
        if self.txrq() != 0 { try!(write!(f, " txrq"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data length control and time stamp register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Tdt2r(pub u32);
impl Tdt2r {
    #[doc="TIME"]
    #[inline] pub fn time(&self) -> bits::U16 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xffff) as u16) } // [31:16]
    }

    #[doc="Returns true if TIME != 0"]
    #[inline] pub fn test_time(&self) -> bool {
        self.time() != 0
    }

    #[doc="Sets the TIME field."]
    #[inline] pub fn set_time<V: Into<bits::U16>>(mut self, value: V) -> Self {
        let value: bits::U16 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xffff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="TGT"]
    #[inline] pub fn tgt(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if TGT != 0"]
    #[inline] pub fn test_tgt(&self) -> bool {
        self.tgt() != 0
    }

    #[doc="Sets the TGT field."]
    #[inline] pub fn set_tgt<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DLC"]
    #[inline] pub fn dlc(&self) -> bits::U4 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xf) as u8) } // [3:0]
    }

    #[doc="Returns true if DLC != 0"]
    #[inline] pub fn test_dlc(&self) -> bool {
        self.dlc() != 0
    }

    #[doc="Sets the DLC field."]
    #[inline] pub fn set_dlc<V: Into<bits::U4>>(mut self, value: V) -> Self {
        let value: bits::U4 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xf << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Tdt2r {
    #[inline]
    fn from(other: u32) -> Self {
         Tdt2r(other)
    }
}

impl ::core::fmt::Display for Tdt2r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Tdt2r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.time() != 0 { try!(write!(f, " time=0x{:x}", self.time()))}
        if self.tgt() != 0 { try!(write!(f, " tgt"))}
        if self.dlc() != 0 { try!(write!(f, " dlc=0x{:x}", self.dlc()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data low register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Tdl2r(pub u32);
impl Tdl2r {
    #[doc="DATA3"]
    #[inline] pub fn data3(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if DATA3 != 0"]
    #[inline] pub fn test_data3(&self) -> bool {
        self.data3() != 0
    }

    #[doc="Sets the DATA3 field."]
    #[inline] pub fn set_data3<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="DATA2"]
    #[inline] pub fn data2(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if DATA2 != 0"]
    #[inline] pub fn test_data2(&self) -> bool {
        self.data2() != 0
    }

    #[doc="Sets the DATA2 field."]
    #[inline] pub fn set_data2<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="DATA1"]
    #[inline] pub fn data1(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if DATA1 != 0"]
    #[inline] pub fn test_data1(&self) -> bool {
        self.data1() != 0
    }

    #[doc="Sets the DATA1 field."]
    #[inline] pub fn set_data1<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DATA0"]
    #[inline] pub fn data0(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xff) as u8) } // [7:0]
    }

    #[doc="Returns true if DATA0 != 0"]
    #[inline] pub fn test_data0(&self) -> bool {
        self.data0() != 0
    }

    #[doc="Sets the DATA0 field."]
    #[inline] pub fn set_data0<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Tdl2r {
    #[inline]
    fn from(other: u32) -> Self {
         Tdl2r(other)
    }
}

impl ::core::fmt::Display for Tdl2r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Tdl2r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.data3() != 0 { try!(write!(f, " data3=0x{:x}", self.data3()))}
        if self.data2() != 0 { try!(write!(f, " data2=0x{:x}", self.data2()))}
        if self.data1() != 0 { try!(write!(f, " data1=0x{:x}", self.data1()))}
        if self.data0() != 0 { try!(write!(f, " data0=0x{:x}", self.data0()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data high register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Tdh2r(pub u32);
impl Tdh2r {
    #[doc="DATA7"]
    #[inline] pub fn data7(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if DATA7 != 0"]
    #[inline] pub fn test_data7(&self) -> bool {
        self.data7() != 0
    }

    #[doc="Sets the DATA7 field."]
    #[inline] pub fn set_data7<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="DATA6"]
    #[inline] pub fn data6(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if DATA6 != 0"]
    #[inline] pub fn test_data6(&self) -> bool {
        self.data6() != 0
    }

    #[doc="Sets the DATA6 field."]
    #[inline] pub fn set_data6<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="DATA5"]
    #[inline] pub fn data5(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if DATA5 != 0"]
    #[inline] pub fn test_data5(&self) -> bool {
        self.data5() != 0
    }

    #[doc="Sets the DATA5 field."]
    #[inline] pub fn set_data5<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DATA4"]
    #[inline] pub fn data4(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xff) as u8) } // [7:0]
    }

    #[doc="Returns true if DATA4 != 0"]
    #[inline] pub fn test_data4(&self) -> bool {
        self.data4() != 0
    }

    #[doc="Sets the DATA4 field."]
    #[inline] pub fn set_data4<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Tdh2r {
    #[inline]
    fn from(other: u32) -> Self {
         Tdh2r(other)
    }
}

impl ::core::fmt::Display for Tdh2r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Tdh2r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.data7() != 0 { try!(write!(f, " data7=0x{:x}", self.data7()))}
        if self.data6() != 0 { try!(write!(f, " data6=0x{:x}", self.data6()))}
        if self.data5() != 0 { try!(write!(f, " data5=0x{:x}", self.data5()))}
        if self.data4() != 0 { try!(write!(f, " data4=0x{:x}", self.data4()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="receive FIFO mailbox identifier register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Ri0r(pub u32);
impl Ri0r {
    #[doc="STID"]
    #[inline] pub fn stid(&self) -> bits::U11 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x7ff) as u16) } // [31:21]
    }

    #[doc="Returns true if STID != 0"]
    #[inline] pub fn test_stid(&self) -> bool {
        self.stid() != 0
    }

    #[doc="Sets the STID field."]
    #[inline] pub fn set_stid<V: Into<bits::U11>>(mut self, value: V) -> Self {
        let value: bits::U11 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x7ff << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="EXID"]
    #[inline] pub fn exid(&self) -> bits::U18 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x3ffff) as u32) } // [20:3]
    }

    #[doc="Returns true if EXID != 0"]
    #[inline] pub fn test_exid(&self) -> bool {
        self.exid() != 0
    }

    #[doc="Sets the EXID field."]
    #[inline] pub fn set_exid<V: Into<bits::U18>>(mut self, value: V) -> Self {
        let value: bits::U18 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x3ffff << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="IDE"]
    #[inline] pub fn ide(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if IDE != 0"]
    #[inline] pub fn test_ide(&self) -> bool {
        self.ide() != 0
    }

    #[doc="Sets the IDE field."]
    #[inline] pub fn set_ide<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="RTR"]
    #[inline] pub fn rtr(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if RTR != 0"]
    #[inline] pub fn test_rtr(&self) -> bool {
        self.rtr() != 0
    }

    #[doc="Sets the RTR field."]
    #[inline] pub fn set_rtr<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

}

impl From<u32> for Ri0r {
    #[inline]
    fn from(other: u32) -> Self {
         Ri0r(other)
    }
}

impl ::core::fmt::Display for Ri0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Ri0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.stid() != 0 { try!(write!(f, " stid=0x{:x}", self.stid()))}
        if self.exid() != 0 { try!(write!(f, " exid=0x{:x}", self.exid()))}
        if self.ide() != 0 { try!(write!(f, " ide"))}
        if self.rtr() != 0 { try!(write!(f, " rtr"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data high register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Rdt0r(pub u32);
impl Rdt0r {
    #[doc="TIME"]
    #[inline] pub fn time(&self) -> bits::U16 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xffff) as u16) } // [31:16]
    }

    #[doc="Returns true if TIME != 0"]
    #[inline] pub fn test_time(&self) -> bool {
        self.time() != 0
    }

    #[doc="Sets the TIME field."]
    #[inline] pub fn set_time<V: Into<bits::U16>>(mut self, value: V) -> Self {
        let value: bits::U16 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xffff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="FMI"]
    #[inline] pub fn fmi(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if FMI != 0"]
    #[inline] pub fn test_fmi(&self) -> bool {
        self.fmi() != 0
    }

    #[doc="Sets the FMI field."]
    #[inline] pub fn set_fmi<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DLC"]
    #[inline] pub fn dlc(&self) -> bits::U4 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xf) as u8) } // [3:0]
    }

    #[doc="Returns true if DLC != 0"]
    #[inline] pub fn test_dlc(&self) -> bool {
        self.dlc() != 0
    }

    #[doc="Sets the DLC field."]
    #[inline] pub fn set_dlc<V: Into<bits::U4>>(mut self, value: V) -> Self {
        let value: bits::U4 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xf << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Rdt0r {
    #[inline]
    fn from(other: u32) -> Self {
         Rdt0r(other)
    }
}

impl ::core::fmt::Display for Rdt0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Rdt0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.time() != 0 { try!(write!(f, " time=0x{:x}", self.time()))}
        if self.fmi() != 0 { try!(write!(f, " fmi=0x{:x}", self.fmi()))}
        if self.dlc() != 0 { try!(write!(f, " dlc=0x{:x}", self.dlc()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data high register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Rdl0r(pub u32);
impl Rdl0r {
    #[doc="DATA3"]
    #[inline] pub fn data3(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if DATA3 != 0"]
    #[inline] pub fn test_data3(&self) -> bool {
        self.data3() != 0
    }

    #[doc="Sets the DATA3 field."]
    #[inline] pub fn set_data3<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="DATA2"]
    #[inline] pub fn data2(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if DATA2 != 0"]
    #[inline] pub fn test_data2(&self) -> bool {
        self.data2() != 0
    }

    #[doc="Sets the DATA2 field."]
    #[inline] pub fn set_data2<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="DATA1"]
    #[inline] pub fn data1(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if DATA1 != 0"]
    #[inline] pub fn test_data1(&self) -> bool {
        self.data1() != 0
    }

    #[doc="Sets the DATA1 field."]
    #[inline] pub fn set_data1<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DATA0"]
    #[inline] pub fn data0(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xff) as u8) } // [7:0]
    }

    #[doc="Returns true if DATA0 != 0"]
    #[inline] pub fn test_data0(&self) -> bool {
        self.data0() != 0
    }

    #[doc="Sets the DATA0 field."]
    #[inline] pub fn set_data0<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Rdl0r {
    #[inline]
    fn from(other: u32) -> Self {
         Rdl0r(other)
    }
}

impl ::core::fmt::Display for Rdl0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Rdl0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.data3() != 0 { try!(write!(f, " data3=0x{:x}", self.data3()))}
        if self.data2() != 0 { try!(write!(f, " data2=0x{:x}", self.data2()))}
        if self.data1() != 0 { try!(write!(f, " data1=0x{:x}", self.data1()))}
        if self.data0() != 0 { try!(write!(f, " data0=0x{:x}", self.data0()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="receive FIFO mailbox data high register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Rdh0r(pub u32);
impl Rdh0r {
    #[doc="DATA7"]
    #[inline] pub fn data7(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if DATA7 != 0"]
    #[inline] pub fn test_data7(&self) -> bool {
        self.data7() != 0
    }

    #[doc="Sets the DATA7 field."]
    #[inline] pub fn set_data7<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="DATA6"]
    #[inline] pub fn data6(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if DATA6 != 0"]
    #[inline] pub fn test_data6(&self) -> bool {
        self.data6() != 0
    }

    #[doc="Sets the DATA6 field."]
    #[inline] pub fn set_data6<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="DATA5"]
    #[inline] pub fn data5(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if DATA5 != 0"]
    #[inline] pub fn test_data5(&self) -> bool {
        self.data5() != 0
    }

    #[doc="Sets the DATA5 field."]
    #[inline] pub fn set_data5<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DATA4"]
    #[inline] pub fn data4(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xff) as u8) } // [7:0]
    }

    #[doc="Returns true if DATA4 != 0"]
    #[inline] pub fn test_data4(&self) -> bool {
        self.data4() != 0
    }

    #[doc="Sets the DATA4 field."]
    #[inline] pub fn set_data4<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Rdh0r {
    #[inline]
    fn from(other: u32) -> Self {
         Rdh0r(other)
    }
}

impl ::core::fmt::Display for Rdh0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Rdh0r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.data7() != 0 { try!(write!(f, " data7=0x{:x}", self.data7()))}
        if self.data6() != 0 { try!(write!(f, " data6=0x{:x}", self.data6()))}
        if self.data5() != 0 { try!(write!(f, " data5=0x{:x}", self.data5()))}
        if self.data4() != 0 { try!(write!(f, " data4=0x{:x}", self.data4()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data high register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Ri1r(pub u32);
impl Ri1r {
    #[doc="STID"]
    #[inline] pub fn stid(&self) -> bits::U11 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x7ff) as u16) } // [31:21]
    }

    #[doc="Returns true if STID != 0"]
    #[inline] pub fn test_stid(&self) -> bool {
        self.stid() != 0
    }

    #[doc="Sets the STID field."]
    #[inline] pub fn set_stid<V: Into<bits::U11>>(mut self, value: V) -> Self {
        let value: bits::U11 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x7ff << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="EXID"]
    #[inline] pub fn exid(&self) -> bits::U18 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x3ffff) as u32) } // [20:3]
    }

    #[doc="Returns true if EXID != 0"]
    #[inline] pub fn test_exid(&self) -> bool {
        self.exid() != 0
    }

    #[doc="Sets the EXID field."]
    #[inline] pub fn set_exid<V: Into<bits::U18>>(mut self, value: V) -> Self {
        let value: bits::U18 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x3ffff << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="IDE"]
    #[inline] pub fn ide(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if IDE != 0"]
    #[inline] pub fn test_ide(&self) -> bool {
        self.ide() != 0
    }

    #[doc="Sets the IDE field."]
    #[inline] pub fn set_ide<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="RTR"]
    #[inline] pub fn rtr(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if RTR != 0"]
    #[inline] pub fn test_rtr(&self) -> bool {
        self.rtr() != 0
    }

    #[doc="Sets the RTR field."]
    #[inline] pub fn set_rtr<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

}

impl From<u32> for Ri1r {
    #[inline]
    fn from(other: u32) -> Self {
         Ri1r(other)
    }
}

impl ::core::fmt::Display for Ri1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Ri1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.stid() != 0 { try!(write!(f, " stid=0x{:x}", self.stid()))}
        if self.exid() != 0 { try!(write!(f, " exid=0x{:x}", self.exid()))}
        if self.ide() != 0 { try!(write!(f, " ide"))}
        if self.rtr() != 0 { try!(write!(f, " rtr"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data high register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Rdt1r(pub u32);
impl Rdt1r {
    #[doc="TIME"]
    #[inline] pub fn time(&self) -> bits::U16 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xffff) as u16) } // [31:16]
    }

    #[doc="Returns true if TIME != 0"]
    #[inline] pub fn test_time(&self) -> bool {
        self.time() != 0
    }

    #[doc="Sets the TIME field."]
    #[inline] pub fn set_time<V: Into<bits::U16>>(mut self, value: V) -> Self {
        let value: bits::U16 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xffff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="FMI"]
    #[inline] pub fn fmi(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if FMI != 0"]
    #[inline] pub fn test_fmi(&self) -> bool {
        self.fmi() != 0
    }

    #[doc="Sets the FMI field."]
    #[inline] pub fn set_fmi<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DLC"]
    #[inline] pub fn dlc(&self) -> bits::U4 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xf) as u8) } // [3:0]
    }

    #[doc="Returns true if DLC != 0"]
    #[inline] pub fn test_dlc(&self) -> bool {
        self.dlc() != 0
    }

    #[doc="Sets the DLC field."]
    #[inline] pub fn set_dlc<V: Into<bits::U4>>(mut self, value: V) -> Self {
        let value: bits::U4 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xf << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Rdt1r {
    #[inline]
    fn from(other: u32) -> Self {
         Rdt1r(other)
    }
}

impl ::core::fmt::Display for Rdt1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Rdt1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.time() != 0 { try!(write!(f, " time=0x{:x}", self.time()))}
        if self.fmi() != 0 { try!(write!(f, " fmi=0x{:x}", self.fmi()))}
        if self.dlc() != 0 { try!(write!(f, " dlc=0x{:x}", self.dlc()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data high register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Rdl1r(pub u32);
impl Rdl1r {
    #[doc="DATA3"]
    #[inline] pub fn data3(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if DATA3 != 0"]
    #[inline] pub fn test_data3(&self) -> bool {
        self.data3() != 0
    }

    #[doc="Sets the DATA3 field."]
    #[inline] pub fn set_data3<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="DATA2"]
    #[inline] pub fn data2(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if DATA2 != 0"]
    #[inline] pub fn test_data2(&self) -> bool {
        self.data2() != 0
    }

    #[doc="Sets the DATA2 field."]
    #[inline] pub fn set_data2<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="DATA1"]
    #[inline] pub fn data1(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if DATA1 != 0"]
    #[inline] pub fn test_data1(&self) -> bool {
        self.data1() != 0
    }

    #[doc="Sets the DATA1 field."]
    #[inline] pub fn set_data1<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DATA0"]
    #[inline] pub fn data0(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xff) as u8) } // [7:0]
    }

    #[doc="Returns true if DATA0 != 0"]
    #[inline] pub fn test_data0(&self) -> bool {
        self.data0() != 0
    }

    #[doc="Sets the DATA0 field."]
    #[inline] pub fn set_data0<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Rdl1r {
    #[inline]
    fn from(other: u32) -> Self {
         Rdl1r(other)
    }
}

impl ::core::fmt::Display for Rdl1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Rdl1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.data3() != 0 { try!(write!(f, " data3=0x{:x}", self.data3()))}
        if self.data2() != 0 { try!(write!(f, " data2=0x{:x}", self.data2()))}
        if self.data1() != 0 { try!(write!(f, " data1=0x{:x}", self.data1()))}
        if self.data0() != 0 { try!(write!(f, " data0=0x{:x}", self.data0()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="mailbox data high register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Rdh1r(pub u32);
impl Rdh1r {
    #[doc="DATA7"]
    #[inline] pub fn data7(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0xff) as u8) } // [31:24]
    }

    #[doc="Returns true if DATA7 != 0"]
    #[inline] pub fn test_data7(&self) -> bool {
        self.data7() != 0
    }

    #[doc="Sets the DATA7 field."]
    #[inline] pub fn set_data7<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="DATA6"]
    #[inline] pub fn data6(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0xff) as u8) } // [23:16]
    }

    #[doc="Returns true if DATA6 != 0"]
    #[inline] pub fn test_data6(&self) -> bool {
        self.data6() != 0
    }

    #[doc="Sets the DATA6 field."]
    #[inline] pub fn set_data6<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="DATA5"]
    #[inline] pub fn data5(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0xff) as u8) } // [15:8]
    }

    #[doc="Returns true if DATA5 != 0"]
    #[inline] pub fn test_data5(&self) -> bool {
        self.data5() != 0
    }

    #[doc="Sets the DATA5 field."]
    #[inline] pub fn set_data5<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="DATA4"]
    #[inline] pub fn data4(&self) -> bits::U8 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0xff) as u8) } // [7:0]
    }

    #[doc="Returns true if DATA4 != 0"]
    #[inline] pub fn test_data4(&self) -> bool {
        self.data4() != 0
    }

    #[doc="Sets the DATA4 field."]
    #[inline] pub fn set_data4<V: Into<bits::U8>>(mut self, value: V) -> Self {
        let value: bits::U8 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0xff << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Rdh1r {
    #[inline]
    fn from(other: u32) -> Self {
         Rdh1r(other)
    }
}

impl ::core::fmt::Display for Rdh1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Rdh1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.data7() != 0 { try!(write!(f, " data7=0x{:x}", self.data7()))}
        if self.data6() != 0 { try!(write!(f, " data6=0x{:x}", self.data6()))}
        if self.data5() != 0 { try!(write!(f, " data5=0x{:x}", self.data5()))}
        if self.data4() != 0 { try!(write!(f, " data4=0x{:x}", self.data4()))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="filter master register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Fmr(pub u32);
impl Fmr {
    #[doc="Filter initialization mode"]
    #[inline] pub fn finit(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FINIT != 0"]
    #[inline] pub fn test_finit(&self) -> bool {
        self.finit() != 0
    }

    #[doc="Sets the FINIT field."]
    #[inline] pub fn set_finit<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

}

impl From<u32> for Fmr {
    #[inline]
    fn from(other: u32) -> Self {
         Fmr(other)
    }
}

impl ::core::fmt::Display for Fmr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Fmr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.finit() != 0 { try!(write!(f, " finit"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="filter mode register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Fm1r(pub u32);
impl Fm1r {
    #[doc="Filter mode"]
    #[inline] pub fn fbm0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FBM0 != 0"]
    #[inline] pub fn test_fbm0(&self) -> bool {
        self.fbm0() != 0
    }

    #[doc="Sets the FBM0 field."]
    #[inline] pub fn set_fbm0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FBM1 != 0"]
    #[inline] pub fn test_fbm1(&self) -> bool {
        self.fbm1() != 0
    }

    #[doc="Sets the FBM1 field."]
    #[inline] pub fn set_fbm1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FBM2 != 0"]
    #[inline] pub fn test_fbm2(&self) -> bool {
        self.fbm2() != 0
    }

    #[doc="Sets the FBM2 field."]
    #[inline] pub fn set_fbm2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FBM3 != 0"]
    #[inline] pub fn test_fbm3(&self) -> bool {
        self.fbm3() != 0
    }

    #[doc="Sets the FBM3 field."]
    #[inline] pub fn set_fbm3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FBM4 != 0"]
    #[inline] pub fn test_fbm4(&self) -> bool {
        self.fbm4() != 0
    }

    #[doc="Sets the FBM4 field."]
    #[inline] pub fn set_fbm4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FBM5 != 0"]
    #[inline] pub fn test_fbm5(&self) -> bool {
        self.fbm5() != 0
    }

    #[doc="Sets the FBM5 field."]
    #[inline] pub fn set_fbm5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FBM6 != 0"]
    #[inline] pub fn test_fbm6(&self) -> bool {
        self.fbm6() != 0
    }

    #[doc="Sets the FBM6 field."]
    #[inline] pub fn set_fbm6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FBM7 != 0"]
    #[inline] pub fn test_fbm7(&self) -> bool {
        self.fbm7() != 0
    }

    #[doc="Sets the FBM7 field."]
    #[inline] pub fn set_fbm7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FBM8 != 0"]
    #[inline] pub fn test_fbm8(&self) -> bool {
        self.fbm8() != 0
    }

    #[doc="Sets the FBM8 field."]
    #[inline] pub fn set_fbm8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FBM9 != 0"]
    #[inline] pub fn test_fbm9(&self) -> bool {
        self.fbm9() != 0
    }

    #[doc="Sets the FBM9 field."]
    #[inline] pub fn set_fbm9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FBM10 != 0"]
    #[inline] pub fn test_fbm10(&self) -> bool {
        self.fbm10() != 0
    }

    #[doc="Sets the FBM10 field."]
    #[inline] pub fn set_fbm10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FBM11 != 0"]
    #[inline] pub fn test_fbm11(&self) -> bool {
        self.fbm11() != 0
    }

    #[doc="Sets the FBM11 field."]
    #[inline] pub fn set_fbm11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FBM12 != 0"]
    #[inline] pub fn test_fbm12(&self) -> bool {
        self.fbm12() != 0
    }

    #[doc="Sets the FBM12 field."]
    #[inline] pub fn set_fbm12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter mode"]
    #[inline] pub fn fbm13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FBM13 != 0"]
    #[inline] pub fn test_fbm13(&self) -> bool {
        self.fbm13() != 0
    }

    #[doc="Sets the FBM13 field."]
    #[inline] pub fn set_fbm13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

}

impl From<u32> for Fm1r {
    #[inline]
    fn from(other: u32) -> Self {
         Fm1r(other)
    }
}

impl ::core::fmt::Display for Fm1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Fm1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fbm0() != 0 { try!(write!(f, " fbm0"))}
        if self.fbm1() != 0 { try!(write!(f, " fbm1"))}
        if self.fbm2() != 0 { try!(write!(f, " fbm2"))}
        if self.fbm3() != 0 { try!(write!(f, " fbm3"))}
        if self.fbm4() != 0 { try!(write!(f, " fbm4"))}
        if self.fbm5() != 0 { try!(write!(f, " fbm5"))}
        if self.fbm6() != 0 { try!(write!(f, " fbm6"))}
        if self.fbm7() != 0 { try!(write!(f, " fbm7"))}
        if self.fbm8() != 0 { try!(write!(f, " fbm8"))}
        if self.fbm9() != 0 { try!(write!(f, " fbm9"))}
        if self.fbm10() != 0 { try!(write!(f, " fbm10"))}
        if self.fbm11() != 0 { try!(write!(f, " fbm11"))}
        if self.fbm12() != 0 { try!(write!(f, " fbm12"))}
        if self.fbm13() != 0 { try!(write!(f, " fbm13"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="filter scale register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Fs1r(pub u32);
impl Fs1r {
    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FSC0 != 0"]
    #[inline] pub fn test_fsc0(&self) -> bool {
        self.fsc0() != 0
    }

    #[doc="Sets the FSC0 field."]
    #[inline] pub fn set_fsc0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FSC1 != 0"]
    #[inline] pub fn test_fsc1(&self) -> bool {
        self.fsc1() != 0
    }

    #[doc="Sets the FSC1 field."]
    #[inline] pub fn set_fsc1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FSC2 != 0"]
    #[inline] pub fn test_fsc2(&self) -> bool {
        self.fsc2() != 0
    }

    #[doc="Sets the FSC2 field."]
    #[inline] pub fn set_fsc2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FSC3 != 0"]
    #[inline] pub fn test_fsc3(&self) -> bool {
        self.fsc3() != 0
    }

    #[doc="Sets the FSC3 field."]
    #[inline] pub fn set_fsc3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FSC4 != 0"]
    #[inline] pub fn test_fsc4(&self) -> bool {
        self.fsc4() != 0
    }

    #[doc="Sets the FSC4 field."]
    #[inline] pub fn set_fsc4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FSC5 != 0"]
    #[inline] pub fn test_fsc5(&self) -> bool {
        self.fsc5() != 0
    }

    #[doc="Sets the FSC5 field."]
    #[inline] pub fn set_fsc5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FSC6 != 0"]
    #[inline] pub fn test_fsc6(&self) -> bool {
        self.fsc6() != 0
    }

    #[doc="Sets the FSC6 field."]
    #[inline] pub fn set_fsc6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FSC7 != 0"]
    #[inline] pub fn test_fsc7(&self) -> bool {
        self.fsc7() != 0
    }

    #[doc="Sets the FSC7 field."]
    #[inline] pub fn set_fsc7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FSC8 != 0"]
    #[inline] pub fn test_fsc8(&self) -> bool {
        self.fsc8() != 0
    }

    #[doc="Sets the FSC8 field."]
    #[inline] pub fn set_fsc8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FSC9 != 0"]
    #[inline] pub fn test_fsc9(&self) -> bool {
        self.fsc9() != 0
    }

    #[doc="Sets the FSC9 field."]
    #[inline] pub fn set_fsc9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FSC10 != 0"]
    #[inline] pub fn test_fsc10(&self) -> bool {
        self.fsc10() != 0
    }

    #[doc="Sets the FSC10 field."]
    #[inline] pub fn set_fsc10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FSC11 != 0"]
    #[inline] pub fn test_fsc11(&self) -> bool {
        self.fsc11() != 0
    }

    #[doc="Sets the FSC11 field."]
    #[inline] pub fn set_fsc11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FSC12 != 0"]
    #[inline] pub fn test_fsc12(&self) -> bool {
        self.fsc12() != 0
    }

    #[doc="Sets the FSC12 field."]
    #[inline] pub fn set_fsc12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter scale configuration"]
    #[inline] pub fn fsc13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FSC13 != 0"]
    #[inline] pub fn test_fsc13(&self) -> bool {
        self.fsc13() != 0
    }

    #[doc="Sets the FSC13 field."]
    #[inline] pub fn set_fsc13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

}

impl From<u32> for Fs1r {
    #[inline]
    fn from(other: u32) -> Self {
         Fs1r(other)
    }
}

impl ::core::fmt::Display for Fs1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Fs1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fsc0() != 0 { try!(write!(f, " fsc0"))}
        if self.fsc1() != 0 { try!(write!(f, " fsc1"))}
        if self.fsc2() != 0 { try!(write!(f, " fsc2"))}
        if self.fsc3() != 0 { try!(write!(f, " fsc3"))}
        if self.fsc4() != 0 { try!(write!(f, " fsc4"))}
        if self.fsc5() != 0 { try!(write!(f, " fsc5"))}
        if self.fsc6() != 0 { try!(write!(f, " fsc6"))}
        if self.fsc7() != 0 { try!(write!(f, " fsc7"))}
        if self.fsc8() != 0 { try!(write!(f, " fsc8"))}
        if self.fsc9() != 0 { try!(write!(f, " fsc9"))}
        if self.fsc10() != 0 { try!(write!(f, " fsc10"))}
        if self.fsc11() != 0 { try!(write!(f, " fsc11"))}
        if self.fsc12() != 0 { try!(write!(f, " fsc12"))}
        if self.fsc13() != 0 { try!(write!(f, " fsc13"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="filter FIFO assignment register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Ffa1r(pub u32);
impl Ffa1r {
    #[doc="Filter FIFO assignment for filter 0"]
    #[inline] pub fn ffa0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FFA0 != 0"]
    #[inline] pub fn test_ffa0(&self) -> bool {
        self.ffa0() != 0
    }

    #[doc="Sets the FFA0 field."]
    #[inline] pub fn set_ffa0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter FIFO assignment for filter 1"]
    #[inline] pub fn ffa1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FFA1 != 0"]
    #[inline] pub fn test_ffa1(&self) -> bool {
        self.ffa1() != 0
    }

    #[doc="Sets the FFA1 field."]
    #[inline] pub fn set_ffa1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter FIFO assignment for filter 2"]
    #[inline] pub fn ffa2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FFA2 != 0"]
    #[inline] pub fn test_ffa2(&self) -> bool {
        self.ffa2() != 0
    }

    #[doc="Sets the FFA2 field."]
    #[inline] pub fn set_ffa2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter FIFO assignment for filter 3"]
    #[inline] pub fn ffa3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FFA3 != 0"]
    #[inline] pub fn test_ffa3(&self) -> bool {
        self.ffa3() != 0
    }

    #[doc="Sets the FFA3 field."]
    #[inline] pub fn set_ffa3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter FIFO assignment for filter 4"]
    #[inline] pub fn ffa4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FFA4 != 0"]
    #[inline] pub fn test_ffa4(&self) -> bool {
        self.ffa4() != 0
    }

    #[doc="Sets the FFA4 field."]
    #[inline] pub fn set_ffa4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter FIFO assignment for filter 5"]
    #[inline] pub fn ffa5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FFA5 != 0"]
    #[inline] pub fn test_ffa5(&self) -> bool {
        self.ffa5() != 0
    }

    #[doc="Sets the FFA5 field."]
    #[inline] pub fn set_ffa5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter FIFO assignment for filter 6"]
    #[inline] pub fn ffa6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FFA6 != 0"]
    #[inline] pub fn test_ffa6(&self) -> bool {
        self.ffa6() != 0
    }

    #[doc="Sets the FFA6 field."]
    #[inline] pub fn set_ffa6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter FIFO assignment for filter 7"]
    #[inline] pub fn ffa7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FFA7 != 0"]
    #[inline] pub fn test_ffa7(&self) -> bool {
        self.ffa7() != 0
    }

    #[doc="Sets the FFA7 field."]
    #[inline] pub fn set_ffa7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter FIFO assignment for filter 8"]
    #[inline] pub fn ffa8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FFA8 != 0"]
    #[inline] pub fn test_ffa8(&self) -> bool {
        self.ffa8() != 0
    }

    #[doc="Sets the FFA8 field."]
    #[inline] pub fn set_ffa8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter FIFO assignment for filter 9"]
    #[inline] pub fn ffa9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FFA9 != 0"]
    #[inline] pub fn test_ffa9(&self) -> bool {
        self.ffa9() != 0
    }

    #[doc="Sets the FFA9 field."]
    #[inline] pub fn set_ffa9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter FIFO assignment for filter 10"]
    #[inline] pub fn ffa10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FFA10 != 0"]
    #[inline] pub fn test_ffa10(&self) -> bool {
        self.ffa10() != 0
    }

    #[doc="Sets the FFA10 field."]
    #[inline] pub fn set_ffa10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter FIFO assignment for filter 11"]
    #[inline] pub fn ffa11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FFA11 != 0"]
    #[inline] pub fn test_ffa11(&self) -> bool {
        self.ffa11() != 0
    }

    #[doc="Sets the FFA11 field."]
    #[inline] pub fn set_ffa11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter FIFO assignment for filter 12"]
    #[inline] pub fn ffa12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FFA12 != 0"]
    #[inline] pub fn test_ffa12(&self) -> bool {
        self.ffa12() != 0
    }

    #[doc="Sets the FFA12 field."]
    #[inline] pub fn set_ffa12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter FIFO assignment for filter 13"]
    #[inline] pub fn ffa13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FFA13 != 0"]
    #[inline] pub fn test_ffa13(&self) -> bool {
        self.ffa13() != 0
    }

    #[doc="Sets the FFA13 field."]
    #[inline] pub fn set_ffa13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

}

impl From<u32> for Ffa1r {
    #[inline]
    fn from(other: u32) -> Self {
         Ffa1r(other)
    }
}

impl ::core::fmt::Display for Ffa1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Ffa1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.ffa0() != 0 { try!(write!(f, " ffa0"))}
        if self.ffa1() != 0 { try!(write!(f, " ffa1"))}
        if self.ffa2() != 0 { try!(write!(f, " ffa2"))}
        if self.ffa3() != 0 { try!(write!(f, " ffa3"))}
        if self.ffa4() != 0 { try!(write!(f, " ffa4"))}
        if self.ffa5() != 0 { try!(write!(f, " ffa5"))}
        if self.ffa6() != 0 { try!(write!(f, " ffa6"))}
        if self.ffa7() != 0 { try!(write!(f, " ffa7"))}
        if self.ffa8() != 0 { try!(write!(f, " ffa8"))}
        if self.ffa9() != 0 { try!(write!(f, " ffa9"))}
        if self.ffa10() != 0 { try!(write!(f, " ffa10"))}
        if self.ffa11() != 0 { try!(write!(f, " ffa11"))}
        if self.ffa12() != 0 { try!(write!(f, " ffa12"))}
        if self.ffa13() != 0 { try!(write!(f, " ffa13"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="filter activation register"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct Fa1r(pub u32);
impl Fa1r {
    #[doc="Filter active"]
    #[inline] pub fn fact0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FACT0 != 0"]
    #[inline] pub fn test_fact0(&self) -> bool {
        self.fact0() != 0
    }

    #[doc="Sets the FACT0 field."]
    #[inline] pub fn set_fact0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FACT1 != 0"]
    #[inline] pub fn test_fact1(&self) -> bool {
        self.fact1() != 0
    }

    #[doc="Sets the FACT1 field."]
    #[inline] pub fn set_fact1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FACT2 != 0"]
    #[inline] pub fn test_fact2(&self) -> bool {
        self.fact2() != 0
    }

    #[doc="Sets the FACT2 field."]
    #[inline] pub fn set_fact2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FACT3 != 0"]
    #[inline] pub fn test_fact3(&self) -> bool {
        self.fact3() != 0
    }

    #[doc="Sets the FACT3 field."]
    #[inline] pub fn set_fact3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FACT4 != 0"]
    #[inline] pub fn test_fact4(&self) -> bool {
        self.fact4() != 0
    }

    #[doc="Sets the FACT4 field."]
    #[inline] pub fn set_fact4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FACT5 != 0"]
    #[inline] pub fn test_fact5(&self) -> bool {
        self.fact5() != 0
    }

    #[doc="Sets the FACT5 field."]
    #[inline] pub fn set_fact5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FACT6 != 0"]
    #[inline] pub fn test_fact6(&self) -> bool {
        self.fact6() != 0
    }

    #[doc="Sets the FACT6 field."]
    #[inline] pub fn set_fact6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FACT7 != 0"]
    #[inline] pub fn test_fact7(&self) -> bool {
        self.fact7() != 0
    }

    #[doc="Sets the FACT7 field."]
    #[inline] pub fn set_fact7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FACT8 != 0"]
    #[inline] pub fn test_fact8(&self) -> bool {
        self.fact8() != 0
    }

    #[doc="Sets the FACT8 field."]
    #[inline] pub fn set_fact8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FACT9 != 0"]
    #[inline] pub fn test_fact9(&self) -> bool {
        self.fact9() != 0
    }

    #[doc="Sets the FACT9 field."]
    #[inline] pub fn set_fact9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FACT10 != 0"]
    #[inline] pub fn test_fact10(&self) -> bool {
        self.fact10() != 0
    }

    #[doc="Sets the FACT10 field."]
    #[inline] pub fn set_fact10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FACT11 != 0"]
    #[inline] pub fn test_fact11(&self) -> bool {
        self.fact11() != 0
    }

    #[doc="Sets the FACT11 field."]
    #[inline] pub fn set_fact11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FACT12 != 0"]
    #[inline] pub fn test_fact12(&self) -> bool {
        self.fact12() != 0
    }

    #[doc="Sets the FACT12 field."]
    #[inline] pub fn set_fact12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter active"]
    #[inline] pub fn fact13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FACT13 != 0"]
    #[inline] pub fn test_fact13(&self) -> bool {
        self.fact13() != 0
    }

    #[doc="Sets the FACT13 field."]
    #[inline] pub fn set_fact13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

}

impl From<u32> for Fa1r {
    #[inline]
    fn from(other: u32) -> Self {
         Fa1r(other)
    }
}

impl ::core::fmt::Display for Fa1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for Fa1r {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fact0() != 0 { try!(write!(f, " fact0"))}
        if self.fact1() != 0 { try!(write!(f, " fact1"))}
        if self.fact2() != 0 { try!(write!(f, " fact2"))}
        if self.fact3() != 0 { try!(write!(f, " fact3"))}
        if self.fact4() != 0 { try!(write!(f, " fact4"))}
        if self.fact5() != 0 { try!(write!(f, " fact5"))}
        if self.fact6() != 0 { try!(write!(f, " fact6"))}
        if self.fact7() != 0 { try!(write!(f, " fact7"))}
        if self.fact8() != 0 { try!(write!(f, " fact8"))}
        if self.fact9() != 0 { try!(write!(f, " fact9"))}
        if self.fact10() != 0 { try!(write!(f, " fact10"))}
        if self.fact11() != 0 { try!(write!(f, " fact11"))}
        if self.fact12() != 0 { try!(write!(f, " fact12"))}
        if self.fact13() != 0 { try!(write!(f, " fact13"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 0 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F0r1(pub u32);
impl F0r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F0r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F0r1(other)
    }
}

impl ::core::fmt::Display for F0r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F0r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 0 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F0r2(pub u32);
impl F0r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F0r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F0r2(other)
    }
}

impl ::core::fmt::Display for F0r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F0r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 1 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F1r1(pub u32);
impl F1r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F1r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F1r1(other)
    }
}

impl ::core::fmt::Display for F1r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F1r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 1 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F1r2(pub u32);
impl F1r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F1r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F1r2(other)
    }
}

impl ::core::fmt::Display for F1r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F1r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 2 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F2r1(pub u32);
impl F2r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F2r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F2r1(other)
    }
}

impl ::core::fmt::Display for F2r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F2r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 2 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F2r2(pub u32);
impl F2r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F2r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F2r2(other)
    }
}

impl ::core::fmt::Display for F2r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F2r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 3 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F3r1(pub u32);
impl F3r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F3r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F3r1(other)
    }
}

impl ::core::fmt::Display for F3r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F3r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 3 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F3r2(pub u32);
impl F3r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F3r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F3r2(other)
    }
}

impl ::core::fmt::Display for F3r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F3r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 4 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F4r1(pub u32);
impl F4r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F4r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F4r1(other)
    }
}

impl ::core::fmt::Display for F4r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F4r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 4 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F4r2(pub u32);
impl F4r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F4r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F4r2(other)
    }
}

impl ::core::fmt::Display for F4r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F4r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 5 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F5r1(pub u32);
impl F5r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F5r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F5r1(other)
    }
}

impl ::core::fmt::Display for F5r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F5r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 5 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F5r2(pub u32);
impl F5r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F5r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F5r2(other)
    }
}

impl ::core::fmt::Display for F5r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F5r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 6 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F6r1(pub u32);
impl F6r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F6r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F6r1(other)
    }
}

impl ::core::fmt::Display for F6r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F6r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 6 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F6r2(pub u32);
impl F6r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F6r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F6r2(other)
    }
}

impl ::core::fmt::Display for F6r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F6r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 7 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F7r1(pub u32);
impl F7r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F7r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F7r1(other)
    }
}

impl ::core::fmt::Display for F7r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F7r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 7 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F7r2(pub u32);
impl F7r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F7r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F7r2(other)
    }
}

impl ::core::fmt::Display for F7r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F7r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 8 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F8r1(pub u32);
impl F8r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F8r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F8r1(other)
    }
}

impl ::core::fmt::Display for F8r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F8r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 8 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F8r2(pub u32);
impl F8r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F8r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F8r2(other)
    }
}

impl ::core::fmt::Display for F8r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F8r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 9 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F9r1(pub u32);
impl F9r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F9r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F9r1(other)
    }
}

impl ::core::fmt::Display for F9r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F9r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 9 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F9r2(pub u32);
impl F9r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F9r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F9r2(other)
    }
}

impl ::core::fmt::Display for F9r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F9r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 10 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F10r1(pub u32);
impl F10r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F10r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F10r1(other)
    }
}

impl ::core::fmt::Display for F10r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F10r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 10 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F10r2(pub u32);
impl F10r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F10r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F10r2(other)
    }
}

impl ::core::fmt::Display for F10r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F10r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 11 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F11r1(pub u32);
impl F11r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F11r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F11r1(other)
    }
}

impl ::core::fmt::Display for F11r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F11r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 11 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F11r2(pub u32);
impl F11r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F11r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F11r2(other)
    }
}

impl ::core::fmt::Display for F11r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F11r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 4 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F12r1(pub u32);
impl F12r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F12r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F12r1(other)
    }
}

impl ::core::fmt::Display for F12r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F12r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 12 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F12r2(pub u32);
impl F12r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F12r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F12r2(other)
    }
}

impl ::core::fmt::Display for F12r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F12r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 13 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F13r1(pub u32);
impl F13r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F13r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F13r1(other)
    }
}

impl ::core::fmt::Display for F13r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F13r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 13 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F13r2(pub u32);
impl F13r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F13r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F13r2(other)
    }
}

impl ::core::fmt::Display for F13r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F13r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 14 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F14r1(pub u32);
impl F14r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F14r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F14r1(other)
    }
}

impl ::core::fmt::Display for F14r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F14r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 14 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F14r2(pub u32);
impl F14r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F14r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F14r2(other)
    }
}

impl ::core::fmt::Display for F14r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F14r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 15 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F15r1(pub u32);
impl F15r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F15r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F15r1(other)
    }
}

impl ::core::fmt::Display for F15r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F15r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 15 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F15r2(pub u32);
impl F15r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F15r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F15r2(other)
    }
}

impl ::core::fmt::Display for F15r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F15r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 16 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F16r1(pub u32);
impl F16r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F16r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F16r1(other)
    }
}

impl ::core::fmt::Display for F16r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F16r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 16 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F16r2(pub u32);
impl F16r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F16r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F16r2(other)
    }
}

impl ::core::fmt::Display for F16r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F16r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 17 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F17r1(pub u32);
impl F17r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F17r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F17r1(other)
    }
}

impl ::core::fmt::Display for F17r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F17r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 17 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F17r2(pub u32);
impl F17r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F17r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F17r2(other)
    }
}

impl ::core::fmt::Display for F17r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F17r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 18 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F18r1(pub u32);
impl F18r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F18r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F18r1(other)
    }
}

impl ::core::fmt::Display for F18r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F18r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 18 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F18r2(pub u32);
impl F18r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F18r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F18r2(other)
    }
}

impl ::core::fmt::Display for F18r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F18r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 19 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F19r1(pub u32);
impl F19r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F19r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F19r1(other)
    }
}

impl ::core::fmt::Display for F19r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F19r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 19 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F19r2(pub u32);
impl F19r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F19r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F19r2(other)
    }
}

impl ::core::fmt::Display for F19r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F19r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 20 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F20r1(pub u32);
impl F20r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F20r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F20r1(other)
    }
}

impl ::core::fmt::Display for F20r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F20r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 20 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F20r2(pub u32);
impl F20r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F20r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F20r2(other)
    }
}

impl ::core::fmt::Display for F20r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F20r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 21 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F21r1(pub u32);
impl F21r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F21r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F21r1(other)
    }
}

impl ::core::fmt::Display for F21r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F21r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 21 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F21r2(pub u32);
impl F21r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F21r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F21r2(other)
    }
}

impl ::core::fmt::Display for F21r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F21r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 22 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F22r1(pub u32);
impl F22r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F22r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F22r1(other)
    }
}

impl ::core::fmt::Display for F22r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F22r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 22 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F22r2(pub u32);
impl F22r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F22r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F22r2(other)
    }
}

impl ::core::fmt::Display for F22r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F22r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 23 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F23r1(pub u32);
impl F23r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F23r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F23r1(other)
    }
}

impl ::core::fmt::Display for F23r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F23r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 23 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F23r2(pub u32);
impl F23r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F23r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F23r2(other)
    }
}

impl ::core::fmt::Display for F23r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F23r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 24 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F24r1(pub u32);
impl F24r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F24r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F24r1(other)
    }
}

impl ::core::fmt::Display for F24r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F24r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 24 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F24r2(pub u32);
impl F24r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F24r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F24r2(other)
    }
}

impl ::core::fmt::Display for F24r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F24r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 25 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F25r1(pub u32);
impl F25r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F25r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F25r1(other)
    }
}

impl ::core::fmt::Display for F25r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F25r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 25 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F25r2(pub u32);
impl F25r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F25r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F25r2(other)
    }
}

impl ::core::fmt::Display for F25r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F25r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 26 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F26r1(pub u32);
impl F26r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F26r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F26r1(other)
    }
}

impl ::core::fmt::Display for F26r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F26r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 26 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F26r2(pub u32);
impl F26r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F26r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F26r2(other)
    }
}

impl ::core::fmt::Display for F26r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F26r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 27 register 1"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F27r1(pub u32);
impl F27r1 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F27r1 {
    #[inline]
    fn from(other: u32) -> Self {
         F27r1(other)
    }
}

impl ::core::fmt::Display for F27r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F27r1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

#[doc="Filter bank 27 register 2"]
#[derive(Default, Clone, Copy, PartialEq, Eq)]
pub struct F27r2(pub u32);
impl F27r2 {
    #[doc="Filter bits"]
    #[inline] pub fn fb0(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 0) & 0x1) as u8) } // [0]
    }

    #[doc="Returns true if FB0 != 0"]
    #[inline] pub fn test_fb0(&self) -> bool {
        self.fb0() != 0
    }

    #[doc="Sets the FB0 field."]
    #[inline] pub fn set_fb0<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 0);
        self.0 |= value << 0;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb1(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 1) & 0x1) as u8) } // [1]
    }

    #[doc="Returns true if FB1 != 0"]
    #[inline] pub fn test_fb1(&self) -> bool {
        self.fb1() != 0
    }

    #[doc="Sets the FB1 field."]
    #[inline] pub fn set_fb1<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 1);
        self.0 |= value << 1;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb2(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 2) & 0x1) as u8) } // [2]
    }

    #[doc="Returns true if FB2 != 0"]
    #[inline] pub fn test_fb2(&self) -> bool {
        self.fb2() != 0
    }

    #[doc="Sets the FB2 field."]
    #[inline] pub fn set_fb2<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 2);
        self.0 |= value << 2;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb3(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 3) & 0x1) as u8) } // [3]
    }

    #[doc="Returns true if FB3 != 0"]
    #[inline] pub fn test_fb3(&self) -> bool {
        self.fb3() != 0
    }

    #[doc="Sets the FB3 field."]
    #[inline] pub fn set_fb3<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 3);
        self.0 |= value << 3;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb4(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 4) & 0x1) as u8) } // [4]
    }

    #[doc="Returns true if FB4 != 0"]
    #[inline] pub fn test_fb4(&self) -> bool {
        self.fb4() != 0
    }

    #[doc="Sets the FB4 field."]
    #[inline] pub fn set_fb4<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 4);
        self.0 |= value << 4;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb5(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 5) & 0x1) as u8) } // [5]
    }

    #[doc="Returns true if FB5 != 0"]
    #[inline] pub fn test_fb5(&self) -> bool {
        self.fb5() != 0
    }

    #[doc="Sets the FB5 field."]
    #[inline] pub fn set_fb5<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 5);
        self.0 |= value << 5;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb6(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 6) & 0x1) as u8) } // [6]
    }

    #[doc="Returns true if FB6 != 0"]
    #[inline] pub fn test_fb6(&self) -> bool {
        self.fb6() != 0
    }

    #[doc="Sets the FB6 field."]
    #[inline] pub fn set_fb6<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 6);
        self.0 |= value << 6;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb7(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 7) & 0x1) as u8) } // [7]
    }

    #[doc="Returns true if FB7 != 0"]
    #[inline] pub fn test_fb7(&self) -> bool {
        self.fb7() != 0
    }

    #[doc="Sets the FB7 field."]
    #[inline] pub fn set_fb7<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 7);
        self.0 |= value << 7;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb8(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 8) & 0x1) as u8) } // [8]
    }

    #[doc="Returns true if FB8 != 0"]
    #[inline] pub fn test_fb8(&self) -> bool {
        self.fb8() != 0
    }

    #[doc="Sets the FB8 field."]
    #[inline] pub fn set_fb8<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 8);
        self.0 |= value << 8;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb9(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 9) & 0x1) as u8) } // [9]
    }

    #[doc="Returns true if FB9 != 0"]
    #[inline] pub fn test_fb9(&self) -> bool {
        self.fb9() != 0
    }

    #[doc="Sets the FB9 field."]
    #[inline] pub fn set_fb9<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 9);
        self.0 |= value << 9;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb10(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 10) & 0x1) as u8) } // [10]
    }

    #[doc="Returns true if FB10 != 0"]
    #[inline] pub fn test_fb10(&self) -> bool {
        self.fb10() != 0
    }

    #[doc="Sets the FB10 field."]
    #[inline] pub fn set_fb10<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 10);
        self.0 |= value << 10;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb11(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 11) & 0x1) as u8) } // [11]
    }

    #[doc="Returns true if FB11 != 0"]
    #[inline] pub fn test_fb11(&self) -> bool {
        self.fb11() != 0
    }

    #[doc="Sets the FB11 field."]
    #[inline] pub fn set_fb11<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 11);
        self.0 |= value << 11;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb12(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 12) & 0x1) as u8) } // [12]
    }

    #[doc="Returns true if FB12 != 0"]
    #[inline] pub fn test_fb12(&self) -> bool {
        self.fb12() != 0
    }

    #[doc="Sets the FB12 field."]
    #[inline] pub fn set_fb12<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 12);
        self.0 |= value << 12;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb13(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 13) & 0x1) as u8) } // [13]
    }

    #[doc="Returns true if FB13 != 0"]
    #[inline] pub fn test_fb13(&self) -> bool {
        self.fb13() != 0
    }

    #[doc="Sets the FB13 field."]
    #[inline] pub fn set_fb13<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 13);
        self.0 |= value << 13;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb14(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 14) & 0x1) as u8) } // [14]
    }

    #[doc="Returns true if FB14 != 0"]
    #[inline] pub fn test_fb14(&self) -> bool {
        self.fb14() != 0
    }

    #[doc="Sets the FB14 field."]
    #[inline] pub fn set_fb14<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 14);
        self.0 |= value << 14;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb15(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 15) & 0x1) as u8) } // [15]
    }

    #[doc="Returns true if FB15 != 0"]
    #[inline] pub fn test_fb15(&self) -> bool {
        self.fb15() != 0
    }

    #[doc="Sets the FB15 field."]
    #[inline] pub fn set_fb15<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 15);
        self.0 |= value << 15;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb16(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 16) & 0x1) as u8) } // [16]
    }

    #[doc="Returns true if FB16 != 0"]
    #[inline] pub fn test_fb16(&self) -> bool {
        self.fb16() != 0
    }

    #[doc="Sets the FB16 field."]
    #[inline] pub fn set_fb16<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 16);
        self.0 |= value << 16;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb17(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 17) & 0x1) as u8) } // [17]
    }

    #[doc="Returns true if FB17 != 0"]
    #[inline] pub fn test_fb17(&self) -> bool {
        self.fb17() != 0
    }

    #[doc="Sets the FB17 field."]
    #[inline] pub fn set_fb17<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 17);
        self.0 |= value << 17;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb18(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 18) & 0x1) as u8) } // [18]
    }

    #[doc="Returns true if FB18 != 0"]
    #[inline] pub fn test_fb18(&self) -> bool {
        self.fb18() != 0
    }

    #[doc="Sets the FB18 field."]
    #[inline] pub fn set_fb18<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 18);
        self.0 |= value << 18;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb19(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 19) & 0x1) as u8) } // [19]
    }

    #[doc="Returns true if FB19 != 0"]
    #[inline] pub fn test_fb19(&self) -> bool {
        self.fb19() != 0
    }

    #[doc="Sets the FB19 field."]
    #[inline] pub fn set_fb19<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 19);
        self.0 |= value << 19;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb20(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 20) & 0x1) as u8) } // [20]
    }

    #[doc="Returns true if FB20 != 0"]
    #[inline] pub fn test_fb20(&self) -> bool {
        self.fb20() != 0
    }

    #[doc="Sets the FB20 field."]
    #[inline] pub fn set_fb20<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 20);
        self.0 |= value << 20;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb21(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 21) & 0x1) as u8) } // [21]
    }

    #[doc="Returns true if FB21 != 0"]
    #[inline] pub fn test_fb21(&self) -> bool {
        self.fb21() != 0
    }

    #[doc="Sets the FB21 field."]
    #[inline] pub fn set_fb21<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 21);
        self.0 |= value << 21;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb22(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 22) & 0x1) as u8) } // [22]
    }

    #[doc="Returns true if FB22 != 0"]
    #[inline] pub fn test_fb22(&self) -> bool {
        self.fb22() != 0
    }

    #[doc="Sets the FB22 field."]
    #[inline] pub fn set_fb22<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 22);
        self.0 |= value << 22;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb23(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 23) & 0x1) as u8) } // [23]
    }

    #[doc="Returns true if FB23 != 0"]
    #[inline] pub fn test_fb23(&self) -> bool {
        self.fb23() != 0
    }

    #[doc="Sets the FB23 field."]
    #[inline] pub fn set_fb23<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 23);
        self.0 |= value << 23;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb24(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 24) & 0x1) as u8) } // [24]
    }

    #[doc="Returns true if FB24 != 0"]
    #[inline] pub fn test_fb24(&self) -> bool {
        self.fb24() != 0
    }

    #[doc="Sets the FB24 field."]
    #[inline] pub fn set_fb24<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 24);
        self.0 |= value << 24;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb25(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 25) & 0x1) as u8) } // [25]
    }

    #[doc="Returns true if FB25 != 0"]
    #[inline] pub fn test_fb25(&self) -> bool {
        self.fb25() != 0
    }

    #[doc="Sets the FB25 field."]
    #[inline] pub fn set_fb25<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 25);
        self.0 |= value << 25;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb26(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 26) & 0x1) as u8) } // [26]
    }

    #[doc="Returns true if FB26 != 0"]
    #[inline] pub fn test_fb26(&self) -> bool {
        self.fb26() != 0
    }

    #[doc="Sets the FB26 field."]
    #[inline] pub fn set_fb26<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 26);
        self.0 |= value << 26;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb27(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 27) & 0x1) as u8) } // [27]
    }

    #[doc="Returns true if FB27 != 0"]
    #[inline] pub fn test_fb27(&self) -> bool {
        self.fb27() != 0
    }

    #[doc="Sets the FB27 field."]
    #[inline] pub fn set_fb27<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 27);
        self.0 |= value << 27;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb28(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 28) & 0x1) as u8) } // [28]
    }

    #[doc="Returns true if FB28 != 0"]
    #[inline] pub fn test_fb28(&self) -> bool {
        self.fb28() != 0
    }

    #[doc="Sets the FB28 field."]
    #[inline] pub fn set_fb28<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 28);
        self.0 |= value << 28;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb29(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 29) & 0x1) as u8) } // [29]
    }

    #[doc="Returns true if FB29 != 0"]
    #[inline] pub fn test_fb29(&self) -> bool {
        self.fb29() != 0
    }

    #[doc="Sets the FB29 field."]
    #[inline] pub fn set_fb29<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 29);
        self.0 |= value << 29;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb30(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 30) & 0x1) as u8) } // [30]
    }

    #[doc="Returns true if FB30 != 0"]
    #[inline] pub fn test_fb30(&self) -> bool {
        self.fb30() != 0
    }

    #[doc="Sets the FB30 field."]
    #[inline] pub fn set_fb30<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 30);
        self.0 |= value << 30;
        self
    }

    #[doc="Filter bits"]
    #[inline] pub fn fb31(&self) -> bits::U1 {
        unsafe { ::core::mem::transmute(((self.0 >> 31) & 0x1) as u8) } // [31]
    }

    #[doc="Returns true if FB31 != 0"]
    #[inline] pub fn test_fb31(&self) -> bool {
        self.fb31() != 0
    }

    #[doc="Sets the FB31 field."]
    #[inline] pub fn set_fb31<V: Into<bits::U1>>(mut self, value: V) -> Self {
        let value: bits::U1 = value.into();
        let value: u32 = value.into();
        self.0 &= !(0x1 << 31);
        self.0 |= value << 31;
        self
    }

}

impl From<u32> for F27r2 {
    #[inline]
    fn from(other: u32) -> Self {
         F27r2(other)
    }
}

impl ::core::fmt::Display for F27r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
         self.0.fmt(f)
    }
}

impl ::core::fmt::Debug for F27r2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        try!(write!(f, "[0x{:08x}", self.0));
        if self.fb0() != 0 { try!(write!(f, " fb0"))}
        if self.fb1() != 0 { try!(write!(f, " fb1"))}
        if self.fb2() != 0 { try!(write!(f, " fb2"))}
        if self.fb3() != 0 { try!(write!(f, " fb3"))}
        if self.fb4() != 0 { try!(write!(f, " fb4"))}
        if self.fb5() != 0 { try!(write!(f, " fb5"))}
        if self.fb6() != 0 { try!(write!(f, " fb6"))}
        if self.fb7() != 0 { try!(write!(f, " fb7"))}
        if self.fb8() != 0 { try!(write!(f, " fb8"))}
        if self.fb9() != 0 { try!(write!(f, " fb9"))}
        if self.fb10() != 0 { try!(write!(f, " fb10"))}
        if self.fb11() != 0 { try!(write!(f, " fb11"))}
        if self.fb12() != 0 { try!(write!(f, " fb12"))}
        if self.fb13() != 0 { try!(write!(f, " fb13"))}
        if self.fb14() != 0 { try!(write!(f, " fb14"))}
        if self.fb15() != 0 { try!(write!(f, " fb15"))}
        if self.fb16() != 0 { try!(write!(f, " fb16"))}
        if self.fb17() != 0 { try!(write!(f, " fb17"))}
        if self.fb18() != 0 { try!(write!(f, " fb18"))}
        if self.fb19() != 0 { try!(write!(f, " fb19"))}
        if self.fb20() != 0 { try!(write!(f, " fb20"))}
        if self.fb21() != 0 { try!(write!(f, " fb21"))}
        if self.fb22() != 0 { try!(write!(f, " fb22"))}
        if self.fb23() != 0 { try!(write!(f, " fb23"))}
        if self.fb24() != 0 { try!(write!(f, " fb24"))}
        if self.fb25() != 0 { try!(write!(f, " fb25"))}
        if self.fb26() != 0 { try!(write!(f, " fb26"))}
        if self.fb27() != 0 { try!(write!(f, " fb27"))}
        if self.fb28() != 0 { try!(write!(f, " fb28"))}
        if self.fb29() != 0 { try!(write!(f, " fb29"))}
        if self.fb30() != 0 { try!(write!(f, " fb30"))}
        if self.fb31() != 0 { try!(write!(f, " fb31"))}
        try!(write!(f, "]"));
        Ok(())
    }
}

